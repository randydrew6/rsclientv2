using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Net;
using System.IO;
using System.Text;
using System.Runtime.InteropServices;
using System.Diagnostics;
using RS_Client.Properties;
using System.Reflection;
using System.ComponentModel;
using FileExplorer_TreeView;
using System.Text.RegularExpressions;

namespace RS_Client
{
    public partial class Form1 : Form
    {
        private string mainuser;

        public string Mainuser
        {
            get
            {
                return mainuser;
            }
            set
            {
                mainuser = value;
            }
        }
        bool ytthrochannel = false;
        string[] MangaHasVol = new string[50];
        string[] MangaURL = new string[50];
        string[] AnimeTitle = new string[200];
        string[] AnimeUrl = new string[200];
        string[] VidTitle = new string[9999];
        string[] VidUrl = new string[9999];
        string[] VidPic = new string[9999];
        MatchCollection rtnSeason;
        string[] VidSeasonlist = new string[60];
        MatchCollection rtnEpisode;
        string[] VidEpisodelist = new string[60];
        string[] GameTitle = new string[100];
        string[] GameEmbedURL = new string[100];
        string[] GameURL = new string[100];
        string[] GamePreview = new string[100];
        string[] EmbedLocation = new string[500];
        string[] EmbedSearch = new string[500];
        string[] EmbedPreview = new string[500];
        string[] ytFavTitle = new string[500];
        string[] ytFavURL = new string[500];
        string currentytchannel;
        string currentytchannelname;
        string[] ScreenShot;
        Process p = null;
        public static int GWL_STYLE = -16;
        public static int WS_CAPTION = 0x00800000 | 0x00400000; //window with a title bar

        [DllImport("User32")]
        private static extern int ShowWindow(int hwnd, int nCmdShow);

        int SW_SHOWMAXIMIZED = 3;

        [DllImport("user32.dll")]
        static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

        //Sets window attributes
        [DllImport("USER32.DLL")]
        public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);

        //Gets window attributes
        [DllImport("USER32.DLL")]
        public static extern int GetWindowLong(IntPtr hWnd, int nIndex);

        [DllImport("user32.dll", EntryPoint = "FindWindow", SetLastError = true)]
        static extern IntPtr FindWindowByCaption(IntPtr ZeroOnly, string lpWindowName);

        [DllImport(@"user32.dll", EntryPoint = "SetWindowPos", CallingConvention = CallingConvention.StdCall, SetLastError = true)]
        public static extern int SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);


        public static void SetPositionSize(IntPtr hWind, int x, int y, int width, int height)
        {
            SetWindowPos(hWind, (IntPtr)null, x, y, width, height, 0u);
        }

        int tries = 0;
        int style = -1;
        string showhelp = "";
        string VidType = "";
        string mangapicurl = "";
        int mangachappages = 0;
        string pricegraph = "";
        string priceitem = "";
        int natprice = 0;
        int Screenshots = 0;
        int Currentshot = 0;
        int Extnums = 0;
        int seconds = 0;
        int minutes = 0;
        int hours = 0;
        int page_number = 0;
        string page = "1";
        string chapter = "1";
        string volume = "0";
        string originaltitle = "";
        string title = "";
        string mangatitleforchap = "";
        string link1 = "http://google.com/";
        string link1_string = "Google";
        string link2 = "http://google.com/";
        string link2_string = "Google";
        string link3 = "http://google.com/";
        string link3_string = "Google";
        string link4 = "http://google.com/";
        string link4_string = "Google";
        string link5 = "http://google.com/";
        string link5_string = "Google";
        string link6 = "http://google.com/";
        string link6_string = "Google";

        string overallrank = "";
        string overallxp = "";

        string atkrank = "";
        string atkxp = "";
        Int32 atkval = 0;

        string defrank = "";
        string defxp = "";
        Int32 defval = 0;

        string strrank = "";
        string strxp = "";
        Int32 strval = 0;

        string rngrank = "";
        string rngxp = "";
        Int32 rngval = 0;

        string mgcrank = "";
        string mgcxp = "";
        Int32 mgcval = 0;

        string pryrank = "";
        string pryxp = "";
        Int32 pryval = 0;

        string rcrank = "";
        string rcxp = "";
        Int32 rcval = 0;

        string conrank = "";
        string conxp = "";
        Int32 conval = 0;

        string hprank = "";
        string hpxp = "";
        Int32 hpval = 0;

        string aglrank = "";
        string aglxp = "";
        Int32 aglval = 0;

        string hrbrank = "";
        string hrbxp = "";
        Int32 hrbval = 0;

        string thfrank = "";
        string thfxp = "";
        Int32 thfval = 0;

        string cftrank = "";
        string cftxp = "";
        Int32 cftval = 0;

        string flcrank = "";
        string flcxp = "";
        Int32 flcval = 0;

        string slyrank = "";
        string slyxp = "";
        Int32 slyval = 0;

        string hntrank = "";
        string hntxp = "";
        Int32 hntval = 0;

        string mnerank = "";
        string mnexp = "";
        Int32 mneval = 0;

        string smtrank = "";
        string smtxp = "";
        Int32 smtval = 0;

        string fshrank = "";
        string fshxp = "";
        Int32 fshval = 0;

        string cokrank = "";
        string cokxp = "";
        Int32 cokval = 0;

        string fmrank = "";
        string fmxp = "";
        Int32 fmval = 0;

        string wcrank = "";
        string wcxp = "";
        Int32 wcval = 0;

        string frmrank = "";
        string frmxp = "";
        Int32 frmval = 0;

        string sumrank = "";
        string sumxp = "";
        Int32 sumval = 0;

        string dngrank = "";
        string dngxp = "";
        Int32 dngval = 0;
        FileExplorer fe = new FileExplorer();
        public Form1()
        {
            InitializeComponent();

            this.Closing += new System.ComponentModel.CancelEventHandler(this.FormClosingEventCancle_Closing);
        }

        protected override void OnLoad(EventArgs e)
        {
            this.Visible = false;
            loading();
            fe.CreateTree(this.trwFileExplorer);
            this.Visible = true;
        }

        void webBrowser1_Navigated(object sender, WebBrowserNavigatedEventArgs e)
        {
            ((WebBrowser)sender).Document.Window.Error += new HtmlElementErrorEventHandler(Window_Error);
            HideScriptErrors(((WebBrowser)sender), true);
        }

        private void browser_DocumentComplete(object sender, WebBrowserDocumentCompletedEventArgs e)
        {
            ((WebBrowser)sender).Document.Window.Error += new HtmlElementErrorEventHandler(Window_Erro);
        }

        private void Window_Erro(object sender, HtmlElementErrorEventArgs e)
        {
            // Ignore the error and suppress the error dialog box.
            e.Handled = false;
        }

        private void btn_animecrazy_Click(object sender, EventArgs e)
        {
            btn_link1.Enabled = false;
            try
            {
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(link1));
            }
            catch { }
            btn_link1.Enabled = true;
        }

        private void btn_youtube_Click(object sender, EventArgs e)
        {
            btn_link3.Enabled = false;
            try
            {
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(link3));
            }
            catch { }
            btn_link3.Enabled = true;
        }

        private void btn_google_Click(object sender, EventArgs e)
        {
            btn_link5.Enabled = false;
            try
            {
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(link5));
            }
            catch { }
            btn_link5.Enabled = true;
        }

        private void btn_runescape_Click(object sender, EventArgs e)
        {
            btn_link6.Enabled = false;
            try
            {
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(link6));
            }
            catch { }
            btn_link6.Enabled = true;
        }

        private void btn_megavideo_Click(object sender, EventArgs e)
        {
            btn_link4.Enabled = false;
            try
            {
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(link4));
            }
            catch { }
            btn_link4.Enabled = true;
        }

        private void btn_runehq_Click(object sender, EventArgs e)
        {
            btn_link2.Enabled = false;
            try
            {
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(link2));
            }
            catch { }
            btn_link2.Enabled = true;
        }

        private void btn_clearurl_Click(object sender, EventArgs e)
        {
            btn_clearurl.Enabled = false;
            txt_ur.Text = "";
            txt_ur.Focus();
            maintab.SelectedIndex = 0;
            btn_clearurl.Enabled = true;
        }

        private void highscoreslookup(string p)
        {
            try
            {
                btn_highscoressearch.Enabled = false;
                string RSN = null;
                RSN = p;
                using (WebClient stats = new WebClient())
                {
                    Stream statstream = stats.OpenRead("http://hiscore.runescape.com/index_lite.ws?player=" + RSN);
                    RSN = null;
                    string[] stringArray = new string[37];
                    string[] tempseperate = new string[3];
                    using (StreamReader statread = new StreamReader(statstream))
                    {
                        string sockread = null;
                        int runs = 0;
                        double points = 0;
                        double output = 0;
                        double minlevel = 30; // first level to display
                        double maxlevel = 127; // last level to display
                        double returnxptolvl = -1;
                        double remover = 0;
                        Int32 tempval = 0;
                        while ((sockread = statread.ReadLine()) != null)
                        {
                            stringArray[runs] = sockread;
                            tempseperate = stringArray[runs].ToString().Split(',');

                            points = 0;
                            output = 0;
                            returnxptolvl = -1;
                            tempval = 0;
                            remover = 0;
                            if (runs > 0)
                            {
                                for (double lvl = 1; lvl <= maxlevel; lvl++)
                                {
                                    points += Math.Floor(lvl + 300 * Math.Pow(2, lvl / 7));
                                    if (lvl >= minlevel)
                                    {
                                        output = Math.Floor(points / 4);
                                        if (output < Convert.ToDouble(tempseperate[2]))
                                        {
                                            tempseperate[1] = (lvl + 1).ToString();
                                            returnxptolvl = lvl + 1;
                                            remover = output;
                                        }
                                        else if (returnxptolvl == lvl)
                                        {
                                            tempval = Convert.ToInt32(100 * Convert.ToDecimal((Convert.ToDouble(tempseperate[2]) - remover) / (output - remover)));
                                        }
                                    }
                                }
                            }
                            switch (runs)
                            {
                                case 0:
                                    lbl_overall.Text = "      : " + tempseperate[1];
                                    overallrank = tempseperate[0];
                                    overallxp = tempseperate[2];
                                    break;
                                case 1:
                                    lbl_attacklvl.Text = "      : " + tempseperate[1];
                                    atkrank = tempseperate[0];
                                    atkxp = tempseperate[2];
                                    atkval = tempval;
                                    break;
                                case 2:
                                    lbl_defencelvl.Text = "      : " + tempseperate[1];
                                    defrank = tempseperate[0];
                                    defxp = tempseperate[2];
                                    defval = tempval;
                                    break;
                                case 3:
                                    lbl_strengthlvl.Text = "      : " + tempseperate[1];
                                    strrank = tempseperate[0];
                                    strxp = tempseperate[2];
                                    strval = tempval;
                                    break;
                                case 4:
                                    lbl_hplvl.Text = "      : " + tempseperate[1];
                                    hprank = tempseperate[0];
                                    hpxp = tempseperate[2];
                                    hpval = tempval;
                                    break;
                                case 5:
                                    lbl_rangelvl.Text = "      : " + tempseperate[1];
                                    rngrank = tempseperate[0];
                                    rngxp = tempseperate[2];
                                    rngval = tempval;
                                    break;
                                case 6:
                                    lbl_prayerlvl.Text = "      : " + tempseperate[1];
                                    pryrank = tempseperate[0];
                                    pryxp = tempseperate[2];
                                    pryval = tempval;
                                    break;
                                case 7:
                                    lbl_magiclvl.Text = "      : " + tempseperate[1];
                                    mgcrank = tempseperate[0];
                                    mgcxp = tempseperate[2];
                                    mgcval = tempval;
                                    break;
                                case 8:
                                    lbl_cooklvl.Text = "      : " + tempseperate[1];
                                    cokrank = tempseperate[0];
                                    cokxp = tempseperate[2];
                                    cokval = tempval;
                                    break;
                                case 9:
                                    lbl_wclvl.Text = "      : " + tempseperate[1];
                                    wcrank = tempseperate[0];
                                    wcxp = tempseperate[2];
                                    wcval = tempval;
                                    break;
                                case 10:
                                    lbl_fletchinglvl.Text = "      : " + tempseperate[1];
                                    flcrank = tempseperate[0];
                                    flcxp = tempseperate[2];
                                    flcval = tempval;
                                    break;
                                case 11:
                                    lbl_fishinglvl.Text = "      : " + tempseperate[1];
                                    fshrank = tempseperate[0];
                                    fshxp = tempseperate[2];
                                    fshval = tempval;
                                    break;
                                case 12:
                                    lbl_fmlvl.Text = "      : " + tempseperate[1];
                                    fmrank = tempseperate[0];
                                    fmxp = tempseperate[2];
                                    fmval = tempval;
                                    break;
                                case 13:
                                    lbl_craftlvl.Text = "      : " + tempseperate[1];
                                    cftrank = tempseperate[0];
                                    cftxp = tempseperate[2];
                                    cftval = tempval;
                                    break;
                                case 14:
                                    lbl_smithlvl.Text = "      : " + tempseperate[1];
                                    smtrank = tempseperate[0];
                                    smtxp = tempseperate[2];
                                    smtval = tempval;
                                    break;
                                case 15:
                                    lbl_mininglvl.Text = "      : " + tempseperate[1];
                                    mnerank = tempseperate[0];
                                    mnexp = tempseperate[2];
                                    mneval = tempval;
                                    break;
                                case 16:
                                    lbl_herblvl.Text = "      : " + tempseperate[1];
                                    hrbrank = tempseperate[0];
                                    hrbxp = tempseperate[2];
                                    hrbval = tempval;
                                    break;
                                case 17:
                                    lbl_agilitylvl.Text = "      : " + tempseperate[1];
                                    aglrank = tempseperate[0];
                                    aglxp = tempseperate[2];
                                    aglval = tempval;
                                    break;
                                case 18:
                                    lbl_thieflvl.Text = "      : " + tempseperate[1];
                                    thfrank = tempseperate[0];
                                    thfxp = tempseperate[2];
                                    thfval = tempval;
                                    break;
                                case 19:
                                    lbl_slayerlvl.Text = "      : " + tempseperate[1];
                                    slyrank = tempseperate[0];
                                    slyxp = tempseperate[2];
                                    slyval = tempval;
                                    break;
                                case 20:
                                    lbl_farminglvl.Text = "      : " + tempseperate[1];
                                    frmrank = tempseperate[0];
                                    frmxp = tempseperate[2];
                                    frmval = tempval;
                                    break;
                                case 21:
                                    lbl_rclvl.Text = "      : " + tempseperate[1];
                                    rcrank = tempseperate[0];
                                    rcxp = tempseperate[2];
                                    rcval = tempval;
                                    break;
                                case 22:
                                    lbl_hunterlvl.Text = "      : " + tempseperate[1];
                                    hntrank = tempseperate[0];
                                    hntxp = tempseperate[2];
                                    hntval = tempval;
                                    break;
                                case 23:
                                    lbl_conlvl.Text = "      : " + tempseperate[1];
                                    conrank = tempseperate[0];
                                    conxp = tempseperate[2];
                                    conval = tempval;
                                    break;
                                case 24:
                                    lbl_summlvl.Text = "      : " + tempseperate[1];
                                    sumrank = tempseperate[0];
                                    sumxp = tempseperate[2];
                                    sumval = tempval;
                                    break;
                                case 25:
                                    lbl_dunglvl.Text = "      : " + tempseperate[1];
                                    dngrank = tempseperate[0];
                                    dngxp = tempseperate[2];
                                    dngval = tempval;
                                    break;
                            }
                            runs++;
                        }
                        statstream.Close();
                        sockread = null;
                    }
                    btn_highscoressearch.Enabled = true;
                }
            }
            catch
            {
                btn_highscoressearch.Enabled = true;
            }
        }

        private void btn_back_Click(object sender, EventArgs e)
        {
            btn_back.Enabled = false;
            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).GoBack();
            maintab.SelectedIndex = 0;
            btn_back.Enabled = true;
        }

        private void btn_forward_Click(object sender, EventArgs e)
        {
            btn_forward.Enabled = false;
            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).GoForward();
            maintab.SelectedIndex = 0;
            btn_forward.Enabled = true;
        }

        private void btn_add_Click(object sender, EventArgs e)
        {
            btn_add.Enabled = false;

            WebBrowser Browser = new WebBrowser();
            tabControl2.TabPages.Add("New Page");
            tabControl2.SelectTab(page_number);
            Browser.Name = "Web Browser";
            Browser.Dock = DockStyle.Fill;
            Browser.ScriptErrorsSuppressed = true;
            Browser.Navigated += new WebBrowserNavigatedEventHandler(Navigated);
            Browser.NewWindow += new System.ComponentModel.CancelEventHandler(this.Browser1_NewWindow);
            Browser.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(Done);
            tabControl2.SelectedTab.Controls.Add(Browser);
            page_number++;
            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).GoHome();
            btn_add.Enabled = true;
        }

        private void btn_close_web_Click(object sender, EventArgs e)
        {
            btn_close_web.Enabled = false;
            if (!(tabControl2.TabPages.Count == 1))
            {
                tabControl2.TabPages.RemoveAt(tabControl2.SelectedIndex);
                tabControl2.SelectTab(tabControl2.TabPages.Count - 1);
                page_number--;
            }
            btn_close_web.Enabled = true;
        }

        private void btn_start_Click(object sender, EventArgs e)
        {
            btn_start.Enabled = false;
            tmr_stopwatch.Enabled = true;
            btn_start.Enabled = true;
        }

        private void tmr_stopwatch_Tick(object sender, EventArgs e)
        {
            string secs = null;
            string mins = null;
            string hrs = null;

            seconds++;
            if (seconds >= 60)
            {
                minutes++;
                seconds = 0;
            }
            if (minutes >= 60)
            {
                hours++;
                minutes = 0;
            }

            if (seconds < 10)
            {
                secs = "0" + Convert.ToString(seconds);
            }
            else
            {
                secs = Convert.ToString(seconds);
            }

            if (minutes < 10)
            {
                mins = "0" + Convert.ToString(minutes);
            }
            else
            {
                mins = Convert.ToString(minutes);
            }

            if (hours < 10)
            {
                hrs = "0" + Convert.ToString(hours);
            }
            else
            {
                hrs = Convert.ToString(hours);
            }

            lbl_stopwatch.Text = Convert.ToString(hrs) + ":" + Convert.ToString(mins) + ":" + Convert.ToString(secs);
        }

        private void btn_stop_Click(object sender, EventArgs e)
        {
            btn_stop.Enabled = false;
            tmr_stopwatch.Enabled = false;
            btn_stop.Enabled = true;
        }

        private void btn_reset_Click(object sender, EventArgs e)
        {
            btn_reset.Enabled = false;
            seconds = 0;
            minutes = 0;
            hours = 0;

            string secs = null;
            string mins = null;
            string hrs = null;

            if (seconds < 10)
            {
                secs = "0" + Convert.ToString(seconds);
            }
            else
            {
                secs = Convert.ToString(seconds);
            }

            if (minutes < 10)
            {
                mins = "0" + Convert.ToString(minutes);
            }
            else
            {
                mins = Convert.ToString(minutes);
            }

            if (hours < 10)
            {
                hrs = "0" + Convert.ToString(hours);
            }
            else
            {
                hrs = Convert.ToString(hours);
            }

            lbl_stopwatch.Text = Convert.ToString(hrs) + ":" + Convert.ToString(mins) + ":" + Convert.ToString(secs);
            secs = null;
            mins = null;
            hrs = null;
            btn_reset.Enabled = true;
        }

        private void btn_search_Click(object sender, EventArgs e)
        {
            searchprice();
        }

        private void searchprice()
        {
            try
            {
                string item = txt_item.Text;
                item = item.Replace("  ", " ");
                item = item.Replace(" ", "_");
                item = item.Replace("'", "%27");

                string html = RandysStringFunctions.GetHtmlContent("http://runescape.wikia.com/wiki/" + item);
                Match rtnmarketprice = Regex.Match(html, @"(?<=GEItem.*span>).*[0-9]", RegexOptions.IgnoreCase);
                Match rtnalchprice = Regex.Match(html, @"(?<=</th><td> ).*(?=&#160;coins)", RegexOptions.IgnoreCase);
                Match rtnitemimage = Regex.Match(html, @"(?<=floatleft.*data-image-name.*src="").*(?="" width=)", RegexOptions.IgnoreCase);
                Match rtngraphimage = Regex.Match(html, @"(?<=Look up price info.*href="").*(?="" class=)", RegexOptions.IgnoreCase);

                string marketprice = rtnmarketprice.ToString();
                txt_pricelookup.Text = marketprice;
                marketprice = marketprice.Replace(",", "");
                int itemprice = Convert.ToInt32(marketprice);

                int alchprice = 0;
                txt_alch.Text = rtnalchprice.ToString();
                string stralchprice = rtnalchprice.ToString();
                stralchprice = stralchprice.Replace(",", "");
                alchprice = Convert.ToInt32(stralchprice);

                WebRequest requestPic = WebRequest.Create(rtnitemimage.ToString());
                WebResponse responsePic = requestPic.GetResponse();
                Image image = Image.FromStream(responsePic.GetResponseStream());
                pic_priceitem.Image = image;
                priceitem = rtnitemimage.ToString();

                WebRequest requesPic = WebRequest.Create(rtngraphimage.ToString());
                WebResponse responsPic = requesPic.GetResponse();
                Image img = Image.FromStream(responsPic.GetResponseStream());
                pic_pricegraph.Image = img;
                pricegraph = rtngraphimage.ToString();


                if (natprice == 0)
                {
                    html = RandysStringFunctions.GetHtmlContent("http://services.runescape.com/m=itemdb_rs/Nature_rune/viewitem.ws?obj=561");
                    Match rtnnatprice = Regex.Match(html, @"(?<=<td>)[0-9]+");
                    natprice = Convert.ToInt16(rtnnatprice.ToString());
                }

                txt_natprice.Text = natprice.ToString("#,##0");
                string strprofit = ((alchprice - itemprice) - natprice).ToString("#,##0");
                txt_profit.Text = strprofit;
            }
            catch { }
        }

        private void btn_read_Click(object sender, EventArgs e)
        {
            readmanga();
        }

        private void readmanga()
        {
            try
            {
                chapter = txt_chapter.Text;
                page = txt_page.Text;
                volume = txt_vol.Text;

                manga_page();

                btn_peviousmanga.Visible = true;
                btn_nextmanga.Visible = true;
                netxtPageToolStripMenuItem.Enabled = true;
                previousPageToolStripMenuItem.Enabled = true;
            }
            catch
            {
                pic_manga0.Image = null;
                title = "";
                originaltitle = "";
                chapter = "1";
                page = "1";
                volume = "0";
                txt_title.Text = "";
                txt_chapter.Text = "";
                txt_page.Text = "";
                txt_vol.Text = "";
                txt_vol.Visible = false;
                label27.Visible = false;
                btn_read.Enabled = true;
                btn_peviousmanga.Visible = false;
                btn_nextmanga.Visible = false;
                MessageBox.Show("Error Loading manga.. Sorry");
            }
        }

        private void manga_page()
        {
            if (volume == "0" || volume == "")
            {
                try
                {
                    Match rtnstr = Regex.Match(RandysStringFunctions.GetHtmlContent(mangatitleforchap + "/" + chapter), @"(?<=Pages.*(\n).*mangadetail"">).*(?=</td)", RegexOptions.Compiled);
                    mangachappages = Convert.ToInt16(rtnstr.Value);
                    if (Convert.ToInt32(page) > mangachappages)
                    {
                        chapter = Convert.ToString(Convert.ToInt32(chapter) + 1);
                        page = "1";
                        txt_page.Text = "1";
                        txt_chapter.Text = chapter;
                    }
                    mangapicurl = title + "/" + chapter + "/" + page + ".jpg";
                    WebRequest requestPic = WebRequest.Create(mangapicurl);
                    WebResponse responsePic = requestPic.GetResponse();
                    pic_manga0.Image = Image.FromStream(responsePic.GetResponseStream());
                    maintab.SelectedIndex = 3;
                }
                catch { }
            }
            else
            {
                try
                {
                    Match rtnstr = Regex.Match(RandysStringFunctions.GetHtmlContent(mangatitleforchap + "/v-" + volume + "/" + chapter), @"(?<=Pages.*(\n).*mangadetail"">).*(?=</td)", RegexOptions.Compiled);
                    mangachappages = Convert.ToInt16(rtnstr.Value);
                    if (Convert.ToInt32(page) > mangachappages)
                    {
                        chapter = Convert.ToString(Convert.ToInt32(chapter) + 1);
                        page = "1";
                        txt_page.Text = "1";
                        txt_chapter.Text = chapter;
                    }
                    mangapicurl = title + "/v-" + volume + "/" + chapter + "/" + page + ".jpg";
                    WebRequest requestPic = WebRequest.Create(mangapicurl);
                    WebResponse responsePic = requestPic.GetResponse();
                    pic_manga0.Image = Image.FromStream(responsePic.GetResponseStream());
                    maintab.SelectedIndex = 3;
                }
                catch { }
            }
        }

        private void btn_peviousmanga_Click(object sender, EventArgs e)
        {
            btn_peviousmanga.Enabled = false;
            txt_page.Text = Convert.ToString(Convert.ToInt16(page) - 1);
            page = Convert.ToString(Convert.ToInt16(page) - 1);

            if (Convert.ToInt64(page) < 1)
            {
                page = "1";
                txt_page.Text = "1";
            }
            else
            {
                manga_page();
            }

            btn_peviousmanga.Enabled = true;
        }

        private void btn_nextmanga_Click(object sender, EventArgs e)
        {
            btn_nextmanga.Enabled = false;
            txt_page.Text = Convert.ToString(Convert.ToInt16(page) + 1);
            page = Convert.ToString(Convert.ToInt16(page) + 1);

            manga_page();
            btn_nextmanga.Enabled = true;
        }

        private void btn_searchmanga_Click(object sender, EventArgs e)
        {
            searchmanga();
            lst_manga.Focus();
        }

        private void searchmanga()
        {
            lst_manga.Items.Clear();
            try
            {
                MatchCollection rtnstr = Regex.Matches(RandysStringFunctions.GetHtmlContent("http://www.mangarush.com/mangas/options=1&title=" + RandysStringFunctions.MakeStringAlphaNumeric(txt_searchmanga.Text)), @"<a href=.*manga/.*</a>");
                int count = 0;
                string[] temp = new string[2];
                for (int runs = 0; runs < rtnstr.Count; runs++)
                {
                    if (Regex.Match(rtnstr[runs].Value, @"/manga/.*(?<=/).*./v-", RegexOptions.Compiled).Success)
                    {
                        MangaHasVol[count] = "true";
                        MangaURL[count] = temp[0];
                        lst_manga.Items.Add(RandysStringFunctions.Removetags(temp[1]));
                        count++;
                    }
                    else if (Regex.Match(rtnstr[runs].Value, @"(?<="").*(?<=/[0-9]+)""", RegexOptions.Compiled).Success)
                    {
                        MangaURL[count] = temp[0];
                        lst_manga.Items.Add(RandysStringFunctions.Removetags(temp[1]));
                        count++;
                    }
                    else
                    {
                        temp[0] = Regex.Match(rtnstr[runs].ToString(), @"(?<="").*(?="" )", RegexOptions.Compiled).Value;
                        temp[1] = Regex.Match(rtnstr[runs].ToString(), @"(?<=>).*(?=<)", RegexOptions.Compiled).Value;
                    }
                }
            }
            catch
            {
                MessageBox.Show("Error loading search information.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void txt_url_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                gotourl();
            }
        }

        private void gotourl()
        {
            char Flag = ' ';
            WebClient checkurl = new WebClient();

            try
            {
                if ((txt_ur.Text).Contains("http://") == true)
                {
                    string temp = "";
                    temp = txt_ur.Text;
                    Flag = (temp)[(temp).Length - 1];
                    if (Flag == '/')
                    {
                        try
                        {
                            string stream = checkurl.DownloadString(txt_ur.Text);
                            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(txt_ur.Text);
                            string save = txt_ur.Text;
                            save = save.Replace("http://", "");
                            save = save.Replace("www.", "");
                            save = save.Replace("/", "");
                            StreamWriter hw = File.AppendText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt");
                            hw.WriteLine(save);
                            hw.Close();
                            if (!txt_ur.Items.Contains(save))
                            {
                                txt_ur.Items.Add(save);
                            }
                            maintab.SelectedIndex = 0;
                        }
                        catch
                        {
                            string chang = txt_ur.Text;
                            chang = chang.Replace("  ", " ");
                            chang = chang.Replace(" ", "+");
                            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri("http://www.google.com/webhp?hl=en#sclient=psy&hl=en&site=webhp&source=hp&q=" + chang + "&aq=f&aqi=g-e1g4&aql=&oq=&pbx=1&bav=on.2,or.r_gc.r_pw.&fp=2be2441b25e78025"));
                            maintab.SelectedIndex = 0;
                        }
                    }
                    else
                    {
                        try
                        {
                            string stream = checkurl.DownloadString(txt_ur.Text + "/");
                            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(txt_ur.Text + "/");
                            string save = txt_ur.Text;
                            save = save.Replace("http://", "");
                            save = save.Replace("www.", "");
                            save = save.Replace("/", "");
                            StreamWriter hw = File.AppendText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt");
                            hw.WriteLine(save);
                            hw.Close();
                            if (!txt_ur.Items.Contains(save))
                            {
                                txt_ur.Items.Add(save);
                            }
                            maintab.SelectedIndex = 0;
                        }
                        catch
                        {
                            string chang = txt_ur.Text;
                            chang = chang.Replace("  ", " ");
                            chang = chang.Replace(" ", "+");
                            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri("http://www.google.com/webhp?hl=en#sclient=psy&hl=en&site=webhp&source=hp&q=" + chang + "&aq=f&aqi=g-e1g4&aql=&oq=&pbx=1&bav=on.2,or.r_gc.r_pw.&fp=2be2441b25e78025"));
                            maintab.SelectedIndex = 0;
                        }
                    }
                }
                else
                {
                    string temp = "";
                    temp = "http://" + txt_ur.Text;
                    Flag = (temp)[(temp).Length - 1];
                    if (Flag == '/')
                    {
                        try
                        {
                            string stream = checkurl.DownloadString("http://" + txt_ur.Text);
                            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate("http://" + txt_ur.Text);
                            string save = txt_ur.Text;
                            save = save.Replace("http://", "");
                            save = save.Replace("www.", "");
                            save = save.Replace("/", "");
                            StreamWriter hw = File.AppendText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt");
                            hw.WriteLine(save);
                            hw.Close();
                            if (!txt_ur.Items.Contains(save))
                            {
                                txt_ur.Items.Add(save);
                            }
                            maintab.SelectedIndex = 0;
                        }
                        catch
                        {
                            string chang = txt_ur.Text;
                            chang = chang.Replace("  ", " ");
                            chang = chang.Replace(" ", "+");
                            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri("http://www.google.com/webhp?hl=en#sclient=psy&hl=en&site=webhp&source=hp&q=" + chang + "&aq=f&aqi=g-e1g4&aql=&oq=&pbx=1&bav=on.2,or.r_gc.r_pw.&fp=2be2441b25e78025"));
                            maintab.SelectedIndex = 0;
                        }
                    }
                    else
                    {
                        try
                        {
                            string stream = checkurl.DownloadString("http://" + txt_ur.Text + "/");
                            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate("http://" + txt_ur.Text + "/");
                            string save = txt_ur.Text;
                            save = save.Replace("http://", "");
                            save = save.Replace("www.", "");
                            save = save.Replace("/", "");
                            StreamWriter hw = File.AppendText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt");
                            hw.WriteLine(save);
                            hw.Close();
                            if (!txt_ur.Items.Contains(save))
                            {
                                txt_ur.Items.Add(save);
                            }
                            maintab.SelectedIndex = 0;
                        }
                        catch
                        {
                            if (chk_lucky.Checked == false)
                            {
                                string chang = txt_ur.Text;
                                chang = chang.Replace("  ", " ");
                                chang = chang.Replace(" ", "+");
                                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri("http://www.google.com/webhp?hl=en#sclient=psy&hl=en&site=webhp&source=hp&q=" + chang + "&aq=f&aqi=g-e1g4&aql=&oq=&pbx=1&bav=on.2,or.r_gc.r_pw.&fp=2be2441b25e78025"));
                                maintab.SelectedIndex = 0;
                            }
                            else
                            {
                                string chang = txt_ur.Text;
                                chang = chang.Replace("  ", " ");
                                chang = chang.Replace(" ", "+");

                                Match rtnstr = Regex.Match(RandysStringFunctions.GetHtmlContent("http://www.gigablast.com/search?k1l=573404&q=" + chang), @"(?<=<a href=).*(?=><font)", RegexOptions.Compiled);
                                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(rtnstr.Value));
                            }
                        }
                    }
                }
            }
            catch
            {
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(((WebBrowser)tabControl2.SelectedTab.Controls[0]).Url.ToString()));
                StreamWriter sw = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\RSWeb.txt");
                maintab.SelectedIndex = 0;
            }
        }

        private void txt_user_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                highscoreslookup(txt_user.Text);
            }
        }

        private void txt_item_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                searchprice();
            }
        }

        private void txt_title_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                readmanga();
            }
        }

        private void txt_searchmanga_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                searchmanga();
                lst_manga.Focus();
            }
        }

        private void webBrowser1_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {
            if (e.KeyCode == Keys.Space)
            {
                txt_page.Text = Convert.ToString(Convert.ToInt16(page) - 1);
                page = Convert.ToString(Convert.ToInt16(page) - 1);
                if (Convert.ToInt64(page) < 1)
                {
                    page = "1";
                    txt_page.Text = "1";
                }

                manga_page();
            }
            else
                if (e.KeyCode == Keys.Right)
                {
                    txt_page.Text = Convert.ToString(Convert.ToInt16(page) + 1);
                    page = Convert.ToString(Convert.ToInt16(page) + 1);

                    manga_page();
                }
        }

        private void btn_p2p_Click(object sender, EventArgs e)
        {
            int dis = splitContainer1.SplitterDistance;
            Size websize = webBrowser2.Size;
            splitContainer1.SplitterDistance = websize.Width;
            webBrowser2.Navigate("http://www.runescape.com/game.ws?j=1");
            webBrowser2.Size = new System.Drawing.Size(dis + 22, websize.Height + 27);
            txt_news.Dispose();
            btn_p2p.Dispose();
            web_ad.Dispose();
            pictureBox2.Dispose();
            tmr_blockads.Enabled = false;
            webBrowser2.Visible = true;
            splitContainer1.SplitterDistance = dis;
        }

        private void lbl_overall_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Overall";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(overallrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(overallxp).ToString("#,##0");
            }
            catch { }
        }

        private void lbl_attacklvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Attack";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(atkrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(atkxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = atkval;
        }

        private void lbl_defencelvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Defence";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(defrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(defxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = defval;
        }

        private void lbl_strengthlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Strength";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(strrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(strxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = strval;
        }

        private void lbl_hplvl_MouseHover(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Constitution";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(hprank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(hpxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = hpval;
        }

        private void lbl_rangelvl_MouseHover(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Ranged";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(rngrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(rngxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = rngval;
        }

        private void lbl_prayerlvl_MouseHover(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Prayer";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(pryrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(pryxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = pryval;
        }

        private void lbl_magiclvl_MouseHover(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Magic";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(mgcrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(mgcxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = mgcval;
        }

        private void lbl_cooklvl_MouseHover(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Cooking";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(cokrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(cokxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = cokval;
        }

        private void lbl_wclvl_MouseHover(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Woodcutting";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(wcrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(wcxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = wcval;
        }

        private void lbl_fletchinglvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Fletching";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(flcrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(flcxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = flcval;
        }

        private void lbl_fishinglvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Fishing";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(fshrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(fshxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = fshval;
        }

        private void lbl_fmlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Firemaking";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(fmrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(fmxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = fmval;
        }

        private void lbl_craftlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Crafting";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(cftrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(cftxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = cftval;
        }

        private void lbl_smithlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Smithing";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(smtrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(smtxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = smtval;
        }

        private void lbl_mininglvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Mining";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(mnerank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(mnexp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = mneval;
        }

        private void lbl_herblvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Herblore";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(hrbrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(hrbxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = hrbval;
        }

        private void lbl_agilitylvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Agility";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(aglrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(aglxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = aglval;
        }

        private void lbl_thieflvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Thieving";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(thfrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(thfxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = thfval;
        }

        private void lbl_slayerlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Slayer";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(slyrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(slyxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = slyval;
        }

        private void lbl_farminglvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Farming";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(frmrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(frmxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = frmval;
        }

        private void lbl_rclvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Runecrafting";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(rcrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(rcxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = rcval;
        }

        private void lbl_hunterlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Hunting";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(hntrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(hntxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = hntval;
        }

        private void lbl_conlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Construction";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(conrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(conxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = conval;
        }

        private void lbl_summlvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Summoning";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(sumrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(sumxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = sumval;
        }

        private void lbl_dunglvl_MouseEnter(object sender, EventArgs e)
        {
            lbl_skillname.Text = "Skill: Dungeoneering";
            try
            {
                lbl_rank.Text = "Rank: " + Convert.ToInt32(dngrank).ToString("#,##0");
                lbl_xp.Text = "Experience:" + Convert.ToInt32(dngxp).ToString("#,##0");
            }
            catch { }
            xptolvlbar.Value = dngval;
        }

        private void lst_manga_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                txt_title.Text = lst_manga.Items[lst_manga.SelectedIndex].ToString();
                originaltitle = lst_manga.Items[lst_manga.SelectedIndex].ToString();
                title = MangaURL[lst_manga.SelectedIndex];
                mangatitleforchap = title;
                title = title.Replace("/manga/", "/files/mangas/");
                if (MangaHasVol[lst_manga.SelectedIndex] == "true")
                {
                    txt_vol.Visible = true;
                    label27.Visible = true;
                    txt_vol.Text = "1";
                    volume = "1";
                }
                else
                {
                    txt_vol.Visible = false;
                    txt_vol.Text = "";
                    volume = "0";
                    label27.Visible = false;
                }
            }
            catch { }
        }

        private void btn_setlink_Click(object sender, EventArgs e)
        {
            linkurl();
        }

        private void btn_launchext_Click(object sender, EventArgs e)
        {
            externallaunch();
        }

        private void btn_extfile_Click(object sender, EventArgs e)
        {
            extfile();
        }

        private void extfile()
        {
            if (txt_extname.Text != "")
            {
                OpenFileDialog ofd = new OpenFileDialog();
                ofd.ShowDialog();
                string filepath = ofd.FileName;
                lst_external.Items.Add(txt_extname.Text);
                lst_loc.Items.Add(filepath);
                Extnums++;
            }
        }

        private void txt_extname_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                extfile();
            }
        }

        private void btn_extremove_Click(object sender, EventArgs e)
        {
            if (lst_external.Items.Count != 0 && lst_external.SelectedIndex > -1)
            {
                int ii = lst_external.SelectedIndex;
                lst_external.Items.RemoveAt(ii);
                lst_loc.Items.RemoveAt(ii);
                if (Extnums != 0)
                {
                    Extnums--;
                }
            }
        }

        private void btn_searchsite_Click(object sender, EventArgs e)
        {
            searchsite();
            lst_vids.Focus();
        }

        private void setupvid(string url, string titleregex, string urlregex, string imageregex, string[] strRemove)
        {
            string html = RandysStringFunctions.GetHtmlContent(url);
            foreach (string str in strRemove)
            {
                html = html.Replace(str, "");
            }
            MatchCollection rtntitle = Regex.Matches(html, titleregex, RegexOptions.IgnoreCase);
            MatchCollection rtnpath = Regex.Matches(html, urlregex, RegexOptions.IgnoreCase);
            MatchCollection rtnimage = Regex.Matches(html, imageregex, RegexOptions.IgnoreCase);
            Array.Clear(VidUrl, 0, VidUrl.Count());
            Array.Clear(VidPic, 0, VidPic.Count());
            Array.Clear(VidTitle, 0, VidTitle.Count());
            lst_vids.Items.Clear();
            int[] numbers = new int[] { rtntitle.Count, rtnpath.Count, rtnimage.Count };
            int minNumber = numbers.Min();
            for (int runs = 0; runs < minNumber; runs++)
            {
                VidTitle[runs] = RandysStringFunctions.Removetags(rtntitle[runs].ToString());
                VidUrl[runs] = rtnpath[runs].ToString();
                if (!rtnimage[runs].ToString().Contains("http://"))
                {
                    VidPic[runs] = "http://" + rtnimage[runs].ToString();
                }
                else
                {
                    VidPic[runs] = rtnimage[runs].ToString();
                }
                lst_vids.Items.Add(VidTitle[runs]);
            }
        }

        private void setupvid(string url, string titleregex, string urlregex)
        {
            string html = RandysStringFunctions.GetHtmlContent(url);
            MatchCollection rtntitle = Regex.Matches(html, titleregex, RegexOptions.IgnoreCase);
            MatchCollection rtnpath = Regex.Matches(html, urlregex, RegexOptions.IgnoreCase);
            Array.Clear(VidUrl, 0, VidUrl.Count());
            Array.Clear(VidPic, 0, VidPic.Count());
            Array.Clear(VidTitle, 0, VidTitle.Count());
            lst_vids.Items.Clear();
            int[] numbers = new int[] { rtntitle.Count, rtnpath.Count };
            int minNumber = numbers.Min();
            for (int runs = 0; runs < minNumber; runs++)
            {
                VidTitle[runs] = RandysStringFunctions.Removetags(rtntitle[runs].ToString());
                VidUrl[runs] = rtnpath[runs].ToString();
                lst_vids.Items.Add(VidTitle[runs]);
            }
        }

        private void setupvid(string url, string titleregex, string urlregex, string imageregex)
        {
            string html = RandysStringFunctions.GetHtmlContent(url);
            MatchCollection rtntitle = Regex.Matches(html, titleregex, RegexOptions.IgnoreCase);
            MatchCollection rtnpath = Regex.Matches(html, urlregex, RegexOptions.IgnoreCase);
            MatchCollection rtnimage = Regex.Matches(html, imageregex, RegexOptions.IgnoreCase);
            Array.Clear(VidUrl, 0, VidUrl.Count());
            Array.Clear(VidPic, 0, VidPic.Count());
            Array.Clear(VidTitle, 0, VidTitle.Count());
            lst_vids.Items.Clear();
            int[] numbers = new int[] { rtntitle.Count, rtnpath.Count, rtnimage.Count };
            int minNumber = numbers.Min();
            for (int runs = 0; runs < minNumber; runs++)
            {
                VidTitle[runs] = RandysStringFunctions.Removetags(rtntitle[runs].ToString());
                VidUrl[runs] = rtnpath[runs].ToString();
                if (!rtnimage[runs].ToString().Contains("http://"))
                {
                    VidPic[runs] = "http://" + rtnimage[runs].ToString();
                }
                else
                {
                    VidPic[runs] = rtnimage[runs].ToString();
                }
                lst_vids.Items.Add(VidTitle[runs]);
            }
        }

        private void searchsite()
        {
            if (trv_shows.Visible == true)
            {
                trv_shows.Visible = false;
            }
            if (rad_ytchannelsec.Checked == true && rad_youtubesearch.Checked == true)
            {
                cmb_youtubechnfavs.Visible = true;
                btn_gofav.Visible = true;
            }
            else
            {
                cmb_youtubechnfavs.Visible = false;
                btn_gofav.Visible = false;
            }
            if (btn_addfav.Visible == true)
            {
                btn_addfav.Visible = false;
            }
            if (btn_removefav.Visible == true)
            {
                btn_removefav.Visible = false;
            }
            if (rad_youtubesearch.Checked == true)
            {
                if (rad_ytvideosec.Checked == true)
                {
                    string search = txt_searchvids.Text;
                    search = search.Replace("  ", "+");
                    search = search.Replace(" ", "+");
                    setupvid("http://www.youtube.com/results?search_query=" + search, @"(?<=.*translation-title.*/watch.*>).*(?=</a></h3>)", @"(?<=.*result-item-translation-title.*href=""/watch[?]v=).*(?="">)", @"(?<=.*video-thumb ux-thumb yt-thumb-default-138.*//)i.*[.]jpg(?=.*video-time)");
                    VidType = "Youtube";
                }
                else
                {
                    if (rad_ytchannelsec.Checked == true)
                    {
                        string search = txt_searchvids.Text;
                        search = search.Replace("  ", "+");
                        search = search.Replace(" ", "+");
                        setupvid("http://www.youtube.com/results?search_query=" + search + "%2C+channel", @"(?<=<h3><a class=.*/user/).*(?=[?].*results_main)", @"(?<=<h3><a class=.*href="").*(?=[?].*results_main)", @"(?<=ux-thumb-wrap result-item-thumb.*img src=""//).*(?="" alt=)");
                        VidType = "YoutubeChannel";
                        if (cmb_youtubechnfavs.Visible == false)
                        {
                            cmb_youtubechnfavs.Visible = true;
                            btn_gofav.Visible = true;
                        }
                    }
                }
            }
            else
                if (rad_showsearch.Checked == true)
                {
                    lst_vids.Items.Clear();
                    string search = txt_searchvids.Text;
                    search = search.Replace("  ", "%20");
                    search = search.Replace(" ", "%20");
                    setupvid("http://watchseries.eu/search/" + search, @"(?<=watch serie )[a-zA-Z0-9-:/. _]+(?=.*<img src=.*(.jpg))", @"(?<=<a href="")[a-zA-Z0-9-:/. _]+(?=.*<img src=.*(.jpg))", @"(?<=<img src="").*(.jpg)");
                    VidType = "Showp1";
                    int totalshows = lst_vids.Items.Count;
                    int vidnums = 0;
                    Array.Clear(VidSeasonlist, 0, VidSeasonlist.Length);
                    Array.Clear(VidEpisodelist, 0, VidEpisodelist.Length);
                    while (totalshows > 0)
                    {
                        string html = RandysStringFunctions.GetHtmlContent(VidUrl[vidnums]);

                        rtnSeason = Regex.Matches(html, @"(?<=Season )[0-9]+", RegexOptions.Compiled);
                        for (int i = 1; i < rtnSeason.Count; i++)
                        {
                            VidSeasonlist[vidnums] += rtnSeason[i].Value + ',';
                        }
                        VidSeasonlist[vidnums] = VidSeasonlist[vidnums].Substring(0, VidSeasonlist[vidnums].Length - 1);
                        rtnEpisode = Regex.Matches(html, @"(?<=Season .*)[0-9]+(?= episode)", RegexOptions.Compiled);
                        for (int i = 0; i < rtnEpisode.Count; i++)
                        {
                            VidEpisodelist[vidnums] += rtnEpisode[i].Value + ',';
                        }
                        VidEpisodelist[vidnums] = VidEpisodelist[vidnums].Substring(0, VidEpisodelist[vidnums].Length - 1);
                        totalshows--;
                        vidnums++;
                    }
                }
                else if (rad_animesearch.Checked == true)
                {
                    lst_vids.Items.Clear();
                    string search = txt_searchvids.Text;
                    search = search.Replace("  ", "+");
                    search = search.Replace(" ", "+");
                    string[] replacestr = new string[2];
                    replacestr[0] = "</b>";
                    replacestr[1] = "<b>";
                    setupvid("http://www.lovemyanime.net/search.php?searchquery=" + search, @"(?<=search-page_in_box_mid_link.*>)[a-zA-Z0-9:/.! '-()-]+(?=<)", @"(?<=search-page_in_box_mid_link.*href="")[a-zA-Z0-9:/.! '-]+", @"(?<=><object data="")[a-zA-Z0-9:/.-]+", replacestr);
                    VidType = "Anime";
                }
                else if (rad_moviesearch.Checked == true)
                {
                    lst_vids.Items.Clear();
                    string search = txt_searchvids.Text;
                    search = search.Replace("  ", "+");
                    search = search.Replace(" ", "+");
                    string html = RandysStringFunctions.GetHtmlContent("http://movie25.com/search.php?key=" + search + "&submit=");
                    MatchCollection rtntitle = Regex.Matches(html, @"(?<=                  ).*(?=                  </a></h1>)", RegexOptions.Compiled);
                    MatchCollection rtnpath = Regex.Matches(html, @"(?<=<h1><a href="").*(?="" )", RegexOptions.Compiled);
                    MatchCollection rtnimage = Regex.Matches(html, @"(?<= <img src="").*jpg", RegexOptions.Compiled);
                    Match rtnrealpath;
                    Size lSize = webvideo.Size;
                    string tmp = "";
                    int count = 0;
                    Array.Clear(VidUrl, 0, VidUrl.Count());
                    for (int runs = 0; runs < rtntitle.Count; runs++)
                    {
                        try
                        {
                            tmp = RandysStringFunctions.GetHtmlContent("http://movie25.com/" + rtnpath[runs].ToString());
                            if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.putlocker.com/file/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && putlockerToolStripMenuItem1.CheckState == CheckState.Checked)
                            {
                                VidUrl[count] = "http://www.putlocker.com/embed/" + rtnrealpath.Value;
                            }
                            else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.sockshare.com/file/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && sockshareToolStripMenuItem.CheckState == CheckState.Checked)
                            {
                                VidUrl[count] = "http://www.sockshare.com/embed/" + rtnrealpath.Value;
                            }
                            else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.nowvideo.eu/video/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && nowvideoToolStripMenuItem1.CheckState == CheckState.Checked)
                            {
                                VidUrl[count] = "http://embed.nowvideo.eu/embed.php?v=" + rtnrealpath.Value + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString();
                            }
                            else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://dwn.so/v/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && dwnToolStripMenuItem.CheckState == CheckState.Checked)
                            {
                                VidUrl[count] = "http://dwn.so/player/embed.php?v=" + rtnrealpath.Value + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString();
                            }
                            else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.videoweed.es/file/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && videoweedToolStripMenuItem.CheckState == CheckState.Checked)
                            {
                                VidUrl[count] = "http://embed.videoweed.es/embed.php?v=" + rtnrealpath.Value + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString();
                            }
                            if (VidUrl[count] != "" && VidUrl[count] != null)
                            {
                                VidTitle[count] = rtntitle[runs].ToString();
                                VidPic[count] = rtnimage[runs].ToString();
                                lst_vids.Items.Add(VidTitle[count]);
                                VidType = "Movie";
                                count++;
                            }
                        }
                        catch { }
                    }
                }
        }

        private void btn_clearvidplayer_Click(object sender, EventArgs e)
        {
            webvideo.Url = null;
        }

        private void txt_searchvids_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                searchsite();
                lst_vids.Focus();
            }
        }

        private void txt_linkurl_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                linkurl();
            }
        }

        private void linkurl()
        {
            btn_setlink.Enabled = false;
            if (txt_linkurl.Text.Length > 7)
            {
                if (txt_linkurl.Text.Substring(0, 7) != "http://")
                {
                    txt_linkurl.Text = "http://" + txt_linkurl.Text;
                }
                if (rad_1.Checked == true)
                {
                    link1 = txt_linkurl.Text;
                    link1_string = txt_linkname.Text;
                    btn_link1.Text = txt_linkname.Text;
                }
                else
                    if (rad_2.Checked == true)
                    {
                        link2 = txt_linkurl.Text;
                        link2_string = txt_linkname.Text;
                        btn_link2.Text = txt_linkname.Text;
                    }
                    else
                        if (rad_3.Checked == true)
                        {
                            link3 = txt_linkurl.Text;
                            link3_string = txt_linkname.Text;
                            btn_link3.Text = txt_linkname.Text;
                        }
                        else
                            if (rad_4.Checked == true)
                            {
                                link4 = txt_linkurl.Text;
                                link4_string = txt_linkname.Text;
                                btn_link4.Text = txt_linkname.Text;
                            }
                            else
                                if (rad_5.Checked == true)
                                {
                                    link5 = txt_linkurl.Text;
                                    link5_string = txt_linkname.Text;
                                    btn_link5.Text = txt_linkname.Text;
                                }
                                else
                                    if (rad_6.Checked == true)
                                    {
                                        link6 = txt_linkurl.Text;
                                        link6_string = txt_linkname.Text;
                                        btn_link6.Text = txt_linkname.Text;
                                    }
            }
            btn_setlink.Enabled = true;
        }

        private void txt_user_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            txt_user.Text = mainuser;
        }

        private void tmr_blockads_Tick(object sender, EventArgs e)
        {
            try
            {
                if (web_ad.Url.ToString() != "http://19ee8df1.linkbucks.com/")
                {
                    tmr_blockads.Enabled = false;
                    web_ad.Dispose();
                }
            }
            catch { }
        }

        private void txt_url_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            txt_ur.Text = "";
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void restoreDefaultToolStripMenuItem_Click(object sender, EventArgs e)
        {
            StreamWriter w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt");
            w.Close();

            w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\WebGame.txt");
            w.Close();

            w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\WebVid.txt");
            w.Close();

            w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\External.txt");
            w.Close();

            w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\RSWeb.txt");
            w.WriteLine("1");
            w.Close();

            w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Links.txt");
            w.WriteLine("false");
            w.WriteLine("http://google.com/");
            w.WriteLine("Google");
            w.WriteLine("http://google.com/");
            w.WriteLine("Google");
            w.WriteLine("http://google.com/");
            w.WriteLine("Google");
            w.WriteLine("http://google.com/");
            w.WriteLine("Google");
            w.WriteLine("http://google.com/");
            w.WriteLine("Google");
            w.WriteLine("http://google.com/");
            w.WriteLine("Google");
            w.Close();

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Others.txt"))
            {
                w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Others.txt");
                w.Close();
            }
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Manga.txt"))
            {
                w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Manga.txt");
                w.Close();
            }
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\PriceLookup.txt"))
            {
                w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\PriceLookup.txt");
                w.Close();
            }
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Notes.txt"))
            {
                w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Notes.txt");
                w.Close();
            }
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\MaxHitMelee.txt"))
            {
                w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\MaxHitMelee.txt");
                w.Close();
            }
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\HighscoresName.txt"))
            {
                w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\HighscoresName.txt");
                w.Close();
            }
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\CombatCalc.txt"))
            {
                w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\CombatCalc.txt");
                w.Close();
            }
        }

        private void hideUtilitiesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (hideUtilitiesToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                tabControl1.Visible = false;
                Size mainSize = maintab.Size;
                maintab.Size = new System.Drawing.Size(mainSize.Width, System.Windows.Forms.Form.ActiveForm.Size.Height - 40);
                try
                {
                    SetPositionSize(p.MainWindowHandle, 0, 0, pnl_gba.Width, pnl_gba.Height);
                    ShowWindow(p.MainWindowHandle.ToInt32(), SW_SHOWMAXIMIZED);
                }
                catch { }
                hideUtilitiesToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                tabControl1.Visible = true;
                Size mainSize = maintab.Size;
                maintab.Size = new System.Drawing.Size(mainSize.Width, System.Windows.Forms.Form.ActiveForm.Size.Height - 180);
                hideUtilitiesToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void netxtPageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            txt_page.Text = Convert.ToString(Convert.ToInt16(page) + 1);
            page = Convert.ToString(Convert.ToInt16(page) + 1);

            manga_page();
        }

        private void previousPageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            txt_page.Text = Convert.ToString(Convert.ToInt16(page) - 1);
            page = Convert.ToString(Convert.ToInt16(page) - 1);
            if (Convert.ToInt64(page) < 1)
            {
                page = "1";
                txt_page.Text = "1";
            }
            else
            {
                manga_page();
            }
        }

        private void loading()
        {
            if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots"))
            {
                string[] ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
                Screenshots = ScreenShot.Count();
            }
            else
            {
                Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
                string[] ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
                Screenshots = ScreenShot.Count();
            }

            try
            {
                using (StreamReader read = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt"))
                {
                    string hist = "";
                    while ((hist = read.ReadLine()) != null)
                    {
                        if (!txt_ur.Items.Contains(hist))
                        {
                            txt_ur.Items.Add(hist);
                        }
                    }
                }
            }
            catch
            {
                StreamWriter w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt");
                w.Close();
            }

            string html = RandysStringFunctions.GetHtmlContent("http://services.runescape.com/m=news/latest_news.rss");
            MatchCollection rtntitle = Regex.Matches(html, @"(?<=			<title>).*(?=</title>)", RegexOptions.Compiled);
            MatchCollection rtnDetails = Regex.Matches(html, @"(?<=<description>(\n).*				.*)[a-zA-Z0-9]+.*", RegexOptions.Compiled);
            for (int runs = 0; runs < rtnDetails.Count; runs++)
            {
                txt_news.Text += RandysStringFunctions.Removetags(rtntitle[runs].Value) + Environment.NewLine;
                txt_news.Text += RandysStringFunctions.Removetags(rtnDetails[runs].Value) + Environment.NewLine + Environment.NewLine;
            }
            html = null;
            rtntitle = null;
            rtnDetails = null;

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\WebVid.txt"))
            {
                using (StreamReader webvidr = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\WebVid.txt"))
                {
                    try
                    {
                        webvideo.Navigate(new Uri(webvidr.ReadLine()));
                        txt_searchvids.Text = webvidr.ReadLine();
                        if (webvidr.ReadLine().ToLower() == "true")
                        {
                            rad_youtubesearch.Checked = true;
                            pnl_yt.Visible = true;
                        }
                        if (webvidr.ReadLine().ToLower() == "true")
                        {
                            rad_showsearch.Checked = true;
                            pnl_yt.Visible = false;
                        }
                        if (webvidr.ReadLine().ToLower() == "true")
                        {
                            rad_animesearch.Checked = true;
                            pnl_yt.Visible = false;
                        }
                        if (webvidr.ReadLine().ToLower() == "true")
                        {
                            rad_moviesearch.Checked = true;
                            pnl_yt.Visible = false;
                        }
                        VidType = webvidr.ReadLine();
                        if (VidType == "YoutubeChannel")
                        {
                            cmb_youtubechnfavs.Visible = true;
                            btn_gofav.Visible = true;
                            rad_ytchannelsec.Checked = true;
                        }
                        else
                        {
                            rad_ytvideosec.Checked = true;
                        }
                        if (webvidr.ReadLine().ToLower() == "true")
                        {
                            cmb_youtubechnfavs.Visible = true;
                            btn_gofav.Visible = true;
                        }
                        int total = Convert.ToInt16(webvidr.ReadLine()) - 1;
                        for (int i = 0; i <= total; i++)
                        {
                            ytFavTitle[i] = webvidr.ReadLine();
                            ytFavURL[i] = webvidr.ReadLine();
                            cmb_youtubechnfavs.Items.Add(ytFavTitle[i]);
                        }
                        string tempread = webvidr.ReadLine();
                        int countn = 0;
                        while (tempread != null)
                        {
                            VidTitle[countn] = tempread;
                            tempread = webvidr.ReadLine();
                            VidUrl[countn] = tempread;
                            tempread = webvidr.ReadLine();
                            VidPic[countn] = tempread;
                            lst_vids.Items.Add(VidTitle[countn]);
                            tempread = webvidr.ReadLine();
                            if (tempread == "True" || tempread == "False")
                            {
                                break;
                            }
                            countn++;
                        }
                        if (tempread == "True")
                        {
                            int i = 0;
                            tempread = webvidr.ReadLine();
                            while (tempread != null)
                            {
                                VidSeasonlist[i] = tempread;
                                tempread = webvidr.ReadLine();
                                VidEpisodelist[i] = tempread;
                                tempread = webvidr.ReadLine();
                                i++;
                            }
                        }
                    }
                    catch { }
                    webvidr.Close();
                }
            }

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\WebGame.txt"))
            {
                using (StreamReader webgamer = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\WebGame.txt"))
                {
                    try
                    {
                        web_games.Navigate(new Uri(webgamer.ReadLine()));
                        txt_game.Text = webgamer.ReadLine();
                        string tempread = webgamer.ReadLine();
                        int countn = 0;
                        while (tempread != null)
                        {
                            GameTitle[countn] = tempread;
                            tempread = webgamer.ReadLine();
                            GameEmbedURL[countn] = tempread;
                            tempread = webgamer.ReadLine();
                            GameURL[countn] = tempread;
                            tempread = webgamer.ReadLine();
                            GamePreview[countn] = tempread;
                            lst_games.Items.Add(GameTitle[countn]);
                            tempread = webgamer.ReadLine();
                            countn++;
                        }
                    }
                    catch { }
                    webgamer.Close();
                }
            }

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\External.txt"))
            {
                string tempread = "";
                using (StreamReader extr = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\External.txt"))
                {
                    while ((tempread = extr.ReadLine()) != null)
                    {
                        lst_external.Items.Add(tempread);
                        tempread = extr.ReadLine();
                        lst_loc.Items.Add(tempread);
                        Extnums++;
                    }
                    extr.Close();
                }
            }

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Links.txt"))
            {
                using (StreamReader linkr = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Links.txt"))
                {
                    if (linkr.ReadLine() == "true")
                    {
                        chk_lucky.Checked = true;
                    }
                    else
                    {
                        chk_lucky.Checked = false;
                    }
                    link1 = linkr.ReadLine();
                    link1_string = linkr.ReadLine();
                    btn_link1.Text = link1_string;
                    link2 = linkr.ReadLine();
                    link2_string = linkr.ReadLine();
                    btn_link2.Text = link2_string;
                    link3 = linkr.ReadLine();
                    link3_string = linkr.ReadLine();
                    btn_link3.Text = link3_string;
                    link4 = linkr.ReadLine();
                    link4_string = linkr.ReadLine();
                    btn_link4.Text = link4_string;
                    link5 = linkr.ReadLine();
                    link5_string = linkr.ReadLine();
                    btn_link5.Text = link5_string;
                    link6 = linkr.ReadLine();
                    link6_string = linkr.ReadLine();
                    btn_link6.Text = link6_string;
                    linkr.Close();
                }
            }

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Manga.txt"))
            {
                using (StreamReader mangar = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Manga.txt"))
                {
                    mangapicurl = mangar.ReadLine();
                    if (mangapicurl != null && mangapicurl != "")
                    {
                        Control[] controls = this.Controls.Find("pic_manga0", true);
                        if (controls.Length == 1) // 0 means not found, more - there are several controls with the same name
                        {
                            PictureBox control = controls[0] as PictureBox;

                            if (control != null)
                            {
                                try
                                {
                                    WebRequest requestPic = WebRequest.Create(mangapicurl);

                                    WebResponse responsePic = requestPic.GetResponse();

                                    Image img = Image.FromStream(responsePic.GetResponseStream());
                                    control.Image = img;
                                }
                                catch { }
                            }
                        }
                        txt_title.Text = mangar.ReadLine();
                        originaltitle = txt_title.Text;
                        title = mangar.ReadLine();
                        txt_chapter.Text = mangar.ReadLine();
                        chapter = txt_chapter.Text;
                        txt_page.Text = mangar.ReadLine();
                        page = txt_page.Text;
                        if (page != "")
                        {
                            netxtPageToolStripMenuItem.Enabled = true;
                            previousPageToolStripMenuItem.Enabled = true;
                            btn_nextmanga.Visible = true;
                            btn_peviousmanga.Visible = true;
                        }
                        txt_vol.Text = mangar.ReadLine();
                        volume = txt_vol.Text;
                        try
                        {
                            if (Convert.ToInt16(volume) > 0)
                            {
                                txt_vol.Visible = true;
                                label27.Visible = true;
                            }
                            else
                            {
                                txt_vol.Visible = false;
                                label27.Visible = false;
                            }
                        }
                        catch
                        {
                            txt_vol.Visible = false;
                            label27.Visible = false;
                        }
                    }
                    mangatitleforchap = mangar.ReadLine();
                    mangar.Close();
                }
            }

            try
            {
                using (StreamReader nread = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Notes.txt"))
                {
                    string t = "";
                    while ((t = nread.ReadLine()) != null)
                    {
                        txt_notes.Text += t + Environment.NewLine;
                    }
                    nread.Close();
                }
            }
            catch
            {
                txt_notes.Text = "";
            }

            try
            {
                using (StreamReader swread = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\Others.txt"))
                {
                    string stopwatchtext = swread.ReadLine();
                    txt_user.Text = swread.ReadLine();
                    highscoreslookup(txt_user.Text);
                    if (swread.ReadLine() == "Yes")
                    {
                        splitContainer1.RightToLeft = RightToLeft.Yes;
                        menuStrip2.RightToLeft = RightToLeft.No;
                        maintab.RightToLeft = RightToLeft.No;
                        tabControl1.RightToLeft = RightToLeft.No;
                        txt_news.RightToLeft = RightToLeft.No;
                    }
                    try
                    {
                        int dis = Convert.ToInt32(swread.ReadLine());
                        if (dis != 0)
                        {
                            splitContainer1.SplitterDistance = dis;
                        }
                    }
                    catch { }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            stagevuToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            stagevuToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            putlockerToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            putlockerToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            gorillavidToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            gorillavidToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            movshareToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            movshareToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            nowvideoToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            nowvideoToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            videoweedToolStripMenuItem1.Checked = true;
                            break;
                        case "False":
                            videoweedToolStripMenuItem1.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            uploadcToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            uploadcToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            iRCToolStripMenuItem.Checked = true;
                            splitContainer2.Panel2Collapsed = true;
                            break;
                        case "False":
                            iRCToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            putlockerToolStripMenuItem1.Checked = true;
                            break;
                        case "False":
                            putlockerToolStripMenuItem1.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            sockshareToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            sockshareToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            nowvideoToolStripMenuItem1.Checked = true;
                            break;
                        case "False":
                            nowvideoToolStripMenuItem1.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            dwnToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            dwnToolStripMenuItem.Checked = false;
                            break;
                    }

                    switch (swread.ReadLine().ToString())
                    {
                        case "True":
                            videoweedToolStripMenuItem.Checked = true;
                            break;
                        case "False":
                            videoweedToolStripMenuItem.Checked = false;
                            break;
                    }

                    if (stopwatchtext != null)
                    {
                        lbl_stopwatch.Text = stopwatchtext;
                    }
                    else
                    {
                        lbl_stopwatch.Text = "00:00:00";
                    }
                    string[] stringArray = new string[37];
                    stringArray = (lbl_stopwatch.Text).Split(":".ToCharArray());
                    swread.Close();
                    if (stringArray[0].Contains("00"))
                    {
                        hours = 0;
                    }
                    else
                    {
                        if (stringArray[0].Contains("0"))
                        {
                            hours = Convert.ToInt16(stringArray[0].Replace("0", ""));
                        }
                        else
                        {
                            hours = Convert.ToInt16(stringArray[0]);
                        }
                    }

                    if (stringArray[1].Contains("00"))
                    {
                        minutes = 0;
                    }
                    else
                    {
                        if (stringArray[1].Contains("0"))
                        {
                            minutes = Convert.ToInt16(stringArray[1].Replace("0", ""));
                        }
                        else
                        {
                            minutes = Convert.ToInt16(stringArray[1]);
                        }
                    }

                    if (stringArray[2].Contains("00"))
                    {
                        seconds = 0;
                    }
                    else
                    {
                        if (stringArray[2].Contains("0"))
                        {
                            seconds = Convert.ToInt16(stringArray[2].Replace("0", ""));
                        }
                        else
                        {
                            seconds = Convert.ToInt16(stringArray[2]);
                        }
                    }

                }
            }
            catch
            {
                lbl_stopwatch.Text = "00:00:00";
                txt_user.Text = "";
            }

            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\RSWeb.txt"))
            {
                using (StreamReader reader = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\RSWeb.txt"))
                {
                    page_number = Convert.ToInt16(reader.ReadLine());
                    string tempweb = "";
                    for (int vari = 0; vari < page_number; vari++)
                    {
                        tempweb = reader.ReadLine();
                        if (vari >= 0)
                        {
                            WebBrowser Browse = new WebBrowser();
                            tabControl2.TabPages.Add("New Page");
                            tabControl2.SelectTab(vari);
                            Browse.Name = "Web Browser";
                            Browse.Dock = DockStyle.Fill;
                            Browse.ScriptErrorsSuppressed = true;
                            Browse.Navigated += new WebBrowserNavigatedEventHandler(Navigated);
                            Browse.NewWindow += new System.ComponentModel.CancelEventHandler(this.Browser1_NewWindow);
                            Browse.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(Done);
                            tabControl2.SelectedTab.Controls.Add(Browse);
                            try
                            {
                                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Navigate(new Uri(tempweb));
                            }
                            catch { }

                        }
                    }
                    reader.Close();
                }
            }
            else
            {
                WebBrowser Brows = new WebBrowser();
                tabControl2.TabPages.Add("New Page");
                Brows.Name = "Web Browser";
                Brows.Dock = DockStyle.Fill;
                Brows.ScriptErrorsSuppressed = true;
                Brows.Navigated += new WebBrowserNavigatedEventHandler(Navigated);
                Brows.NewWindow += new System.ComponentModel.CancelEventHandler(this.Browser1_NewWindow);
                Brows.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(Done);
                tabControl2.SelectedTab.Controls.Add(Brows);
                page_number++;
                ((WebBrowser)tabControl2.SelectedTab.Controls[0]).GoHome();
            }

            try
            {
                html = RandysStringFunctions.GetHtmlContent("http://rsclient.niceboard.com/t3-version-fdhfduf");
                rtntitle = Regex.Matches(html, @"(?<=pokemonmn ).*(?= pokemonmonmon)");
                if (rtntitle[0].ToString() != "4")
                {
                    MessageBox.Show(this, "Please download the current version online at SmokinElite.com", "Out of date", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    Application.Exit();
                }
            }
            catch { Application.Exit(); }

            try
            {
                html = RandysStringFunctions.GetHtmlContent("http://services.runescape.com/m=itemdb_rs/Nature_rune/viewitem.ws?obj=561");
                rtntitle = Regex.Matches(html, @"(?<=<td>)[0-9]+");
                natprice = Convert.ToInt16(rtntitle[0].ToString());
            }
            catch { natprice = 0; }

            try
            {
                using (StreamReader plr = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\PriceLookup.txt"))
                {
                    txt_item.Text = plr.ReadLine();
                    txt_pricelookup.Text = plr.ReadLine();
                    txt_alch.Text = plr.ReadLine();
                    txt_profit.Text = plr.ReadLine();
                    pricegraph = plr.ReadLine();
                    WebRequest requestPic = WebRequest.Create(pricegraph);
                    WebResponse responsePic = requestPic.GetResponse();
                    Image imag = Image.FromStream(responsePic.GetResponseStream());
                    pic_pricegraph.Image = imag;
                    priceitem = plr.ReadLine();
                    requestPic = WebRequest.Create(priceitem);
                    responsePic = requestPic.GetResponse();
                    imag = Image.FromStream(responsePic.GetResponseStream());
                    pic_priceitem.Image = imag;
                    txt_natprice.Text = natprice.ToString();
                    plr.Close();
                }
            }
            catch
            {
                txt_item.Text = "";
                txt_pricelookup.Text = "";
                txt_alch.Text = "";
                txt_profit.Text = "";
                txt_natprice.Text = "";
            }
        }

        private void btn_searchgames_Click(object sender, EventArgs e)
        {
            searchgames();
        }

        private void searchgames()
        {
            string search = (txt_game.Text).ToLower();
            search = search.Replace("  ", "+");
            search = search.Replace(" ", "+");
            GameFill(@"http://www.gamefudge.com/thumbnails.php?album=search&type=full&search=" + search + @"&x=0&y=0");
        }

        private void GameFill(string url)
        {
            try
            {
                lst_games.Focus();
                string html = RandysStringFunctions.GetHtmlContent(url);
                MatchCollection rtntitle = Regex.Matches(html, @"(?<=.*><a href=.*"">).*(?=</a></span><span )", RegexOptions.IgnoreCase);
                MatchCollection rtnurl = Regex.Matches(html, @"(?<=.*><a href="").*(?="">.*</a></span><span )", RegexOptions.IgnoreCase);
                MatchCollection rtnimg = Regex.Matches(html, @"(?<=.*><img src="").*(?="" class=)", RegexOptions.IgnoreCase);
                Array.Clear(GameEmbedURL, 0, GameEmbedURL.Count());
                Array.Clear(GameURL, 0, GameURL.Count());
                Array.Clear(GamePreview, 0, GamePreview.Count());
                Array.Clear(GameTitle, 0, GameTitle.Count());
                lst_games.Items.Clear();
                int[] numbers = new int[] { rtntitle.Count, rtnurl.Count, rtnimg.Count };
                int minNumber = numbers.Min();
                for (int runs = 0; runs < minNumber; runs++)
                {
                    GamePreview[runs] = @"http://www.gamefudge.com/" + rtnimg[runs].ToString();
                    GameTitle[runs] = RandysStringFunctions.Removetags(rtntitle[runs].ToString());
                    GameURL[runs] = @"http://www.gamefudge.com/" + rtnurl[runs].ToString();
                    html = RandysStringFunctions.GetHtmlContent(@"http://www.gamefudge.com/" + rtnurl[runs].ToString());
                    Match rtnembedurl = Regex.Match(html, @"(?<=new SWFObject."").*[.]swf", RegexOptions.IgnoreCase);
                    GameEmbedURL[runs] = rtnembedurl.ToString();
                    lst_games.Items.Add(GameTitle[runs]);
                }
            }
            catch { }
        }

        private void txt_game_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                searchgames();
                lst_games.Focus();
            }
        }

        private void lst_games_SelectedIndexChanged(object sender, EventArgs e)
        {
            web_games.Navigate(GamePreview[lst_games.SelectedIndex]);
        }

        private void btn_cleargame_Click(object sender, EventArgs e)
        {
            web_games.Url = null;
        }

        public Image CaptureWindow(IntPtr handle)
        {
            // get te hDC of the target window
            IntPtr hdcSrc = User32.GetWindowDC(handle);
            // get the size
            User32.RECT windowRect = new User32.RECT();
            User32.GetWindowRect(handle, ref windowRect);
            int width = webBrowser2.Width;
            int height = webBrowser2.Height - 24;
            // create a device context we can copy to
            IntPtr hdcDest = GDI32.CreateCompatibleDC(hdcSrc);
            // create a bitmap we can copy it to,
            // using GetDeviceCaps to get the width/height
            IntPtr hBitmap = GDI32.CreateCompatibleBitmap(hdcSrc, width, height);
            // select the bitmap object
            IntPtr hOld = GDI32.SelectObject(hdcDest, hBitmap);
            // bitblt over
            GDI32.BitBlt(hdcDest, webBrowser2.Location.X, webBrowser2.Location.Y + 24, width, height, hdcSrc, webBrowser2.Location.X, webBrowser2.Location.Y + 24, GDI32.SRCCOPY);
            // restore selection
            GDI32.SelectObject(hdcDest, hOld);
            // clean up 
            GDI32.DeleteDC(hdcDest);
            User32.ReleaseDC(handle, hdcSrc);
            // get a .NET image object for it
            Image img = Image.FromHbitmap(hBitmap);
            // free up the Bitmap object
            GDI32.DeleteObject(hBitmap);
            return img;
        }

        public void CaptureWindowToFile(IntPtr handle, string filename, ImageFormat format)
        {
            Image img = CaptureWindow(handle);
            img.Save(filename, format);
        }

        /// <summary>
        /// Helper class containing Gdi32 API functions
        /// </summary>
        private class GDI32
        {

            public const int SRCCOPY = 0x00CC0020; // BitBlt dwRop parameter
            [DllImport("gdi32.dll")]
            public static extern bool BitBlt(IntPtr hObject, int nXDest, int nYDest,
                int nWidth, int nHeight, IntPtr hObjectSource,
                int nXSrc, int nYSrc, int dwRop);
            [DllImport("gdi32.dll")]
            public static extern IntPtr CreateCompatibleBitmap(IntPtr hDC, int nWidth,
               int nHeight);
            [DllImport("gdi32.dll")]
            public static extern IntPtr CreateCompatibleDC(IntPtr hDC);
            [DllImport("gdi32.dll")]
            public static extern bool DeleteDC(IntPtr hDC);
            [DllImport("gdi32.dll")]
            public static extern bool DeleteObject(IntPtr hObject);
            [DllImport("gdi32.dll")]
            public static extern IntPtr SelectObject(IntPtr hDC, IntPtr hObject);
        }

        /// <summary>
        /// Helper class containing User32 API functions
        /// </summary>
        private class User32
        {
            [StructLayout(LayoutKind.Sequential)]
            public struct RECT
            {
                public int left;
                public int top;
                public int right;
                public int bottom;
            }
            [DllImport("user32.dll")]
            public static extern IntPtr GetDesktopWindow();
            [DllImport("user32.dll")]
            public static extern IntPtr GetWindowDC(IntPtr hWnd);
            [DllImport("user32.dll")]
            public static extern IntPtr ReleaseDC(IntPtr hWnd, IntPtr hDC);
            [DllImport("user32.dll")]
            public static extern IntPtr GetWindowRect(IntPtr hWnd, ref RECT rect);
        }

        private void screenShotToolStripMenuItem_Click(object sender, EventArgs e)
        {
            CaptureWindowToFile(this.Handle, Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + @"\Randys RS Client\ScreenShots\temp" + Convert.ToString(Screenshots) + ".bmp", ImageFormat.Bmp);
            ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
            Screenshots = ScreenShot.Count();
            Currentshot = 0;
        }

        private void btn_nextscreen_Click(object sender, EventArgs e)
        {
            try
            {
                ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
                Screenshots = ScreenShot.Count();
                Currentshot++;
                if (Currentshot > Screenshots)
                {
                    Currentshot = Screenshots;
                }
                FileStream fileStream = new FileStream(ScreenShot[Currentshot], FileMode.Open, FileAccess.Read);
                pic_shots.Image = Image.FromStream(fileStream);
                fileStream.Close();
            }
            catch
            {
                try
                {
                    ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
                    Screenshots = ScreenShot.Count();
                    Currentshot = 0;
                    FileStream fileStream = new FileStream(ScreenShot[Currentshot], FileMode.Open, FileAccess.Read);
                    pic_shots.Image = Image.FromStream(fileStream);
                    fileStream.Close();
                }
                catch { Currentshot = 0; }
            }
        }

        private void btn_prevscreen_Click(object sender, EventArgs e)
        {
            try
            {
                ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
                Screenshots = ScreenShot.Count();
                Currentshot--;
                if (Currentshot < 0)
                {
                    Currentshot = 0;
                }
                FileStream fileStream = new FileStream(ScreenShot[Currentshot], FileMode.Open, FileAccess.Read);
                pic_shots.Image = Image.FromStream(fileStream);
                fileStream.Close();
            }
            catch
            {
                try
                {
                    ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
                    Screenshots = ScreenShot.Count();
                    Currentshot = Screenshots;
                    FileStream fileStream = new FileStream(ScreenShot[Currentshot], FileMode.Open, FileAccess.Read);
                    pic_shots.Image = Image.FromStream(fileStream);
                    fileStream.Close();
                }
                catch { Currentshot = 0; }
            }
        }

        private void pic_manga0_Click(object sender, EventArgs e)
        {
            if (pic_manga0.Image != null)
            {
                txt_page.Text = Convert.ToString(Convert.ToInt16(page) + 1);
                page = Convert.ToString(Convert.ToInt16(page) + 1);

                manga_page();
            }
        }

        private void lst_external_DoubleClick(object sender, EventArgs e)
        {
            externallaunch();
        }

        private void externallaunch()
        {
            if (lst_external.Items.Count != 0 && lst_external.SelectedIndex > -1)
            {
                try
                {
                    using (Process pr = new Process())
                    {
                        pr.StartInfo.FileName = lst_loc.Items[lst_external.SelectedIndex].ToString();
                        pr.Start();
                    }
                }
                catch { }
            }
        }

        private void lst_vids_DoubleClick(object sender, EventArgs e)
        {
            webplayersearch();
        }

        private void webplayersearch()
        {
            ytthrochannel = false;
            if (trv_shows.Visible != true)
            {
                pic_video.Visible = false;
            }
            if (rad_ytchannelsec.Checked == true && rad_youtubesearch.Checked == true)
            {
                cmb_youtubechnfavs.Visible = true;
                btn_gofav.Visible = true;
            }
            else
            {
                cmb_youtubechnfavs.Visible = false;
                btn_gofav.Visible = false;
            }
            if (lst_vids.Items.Count != 0 && lst_vids.SelectedIndex > -1)
            {
                if (VidType == "Youtube")
                {
                    webvideo.Url = null;
                    maintab.SelectedIndex = 2;
                    webvideo.Navigate(new Uri("http://www.youtube.com/v/" + VidUrl[lst_vids.SelectedIndex]));
                }
                else if (VidType == "YoutubeChannel")
                {
                    currentytchannel = VidUrl[lst_vids.SelectedIndex] + "/videos?view=0";
                    currentytchannel = currentytchannel.Replace("//videos?", "/videos?");
                    currentytchannelname = VidTitle[lst_vids.SelectedIndex];
                    setupvid(currentytchannel, @"(?<=class=""yt-uix-sessionlink"" data-sessionlink=.*title="").*(?="" dir=)", @"(?<=<a href=""/watch[?]v=).*(?=&amp;.*title)", @"(?<=""//).*.jpg(?=.*video-time)");

                    if (btn_addfav.Visible == false && !cmb_youtubechnfavs.Items.Contains(currentytchannelname))
                    {
                        btn_addfav.Visible = true;
                    }
                    else if (btn_addfav.Visible == true && cmb_youtubechnfavs.Items.Contains(currentytchannelname))
                    {
                        btn_addfav.Visible = false;
                    }

                    if (btn_removefav.Visible == false && cmb_youtubechnfavs.Items.Contains(currentytchannelname))
                    {
                        btn_removefav.Visible = true;
                    }
                    else
                    {
                        btn_removefav.Visible = false;
                    }
                    ytthrochannel = true;
                    VidType = "Youtube";
                }
                else if (VidType == "Movie")
                {
                    webvideo.Url = null;
                    maintab.SelectedIndex = 2;
                    webvideo.Navigate(new Uri(VidUrl[lst_vids.SelectedIndex]));
                }
                else if (VidType == "Animep3")
                {
                    try
                    {
                        if ((lst_vids.SelectedIndex + 1) == lst_vids.Items.Count)
                        {
                            lst_vids.Items.Clear();
                            string temp = "";
                            int nums = 0;
                            while (temp != null)
                            {
                                temp = VidTitle[nums];
                                lst_vids.Items.Add(temp);
                                VidType = "Animep2";
                                nums++;
                            }
                        }
                        else
                        {
                            webvideo.Url = null;
                            maintab.SelectedIndex = 2;
                            webvideo.Navigate(new Uri(AnimeUrl[lst_vids.SelectedIndex]));
                        }
                    }
                    catch { }
                }
                else if (VidType == "Animep2")
                {
                    try
                    {
                        string html = RandysStringFunctions.GetHtmlContent(VidUrl[lst_vids.SelectedIndex]);
                        html = html.Replace(@"""http://lovemyanimechat.chatango.com/group", "");
                        MatchCollection rtntitle = Regex.Matches(html, @"(?<=.*embed.*=*""http://)[a-zA-Z0-9.]+", RegexOptions.Compiled);
                        MatchCollection rtnpath = Regex.Matches(html, @"(?<=.*embed.*=*"")http[a-zA-Z0-9.:/-?-&-]+", RegexOptions.Compiled);
                        Match rtnCoords;
                        Array.Clear(AnimeUrl, 0, AnimeUrl.Count());
                        Array.Clear(AnimeTitle, 0, AnimeTitle.Count());
                        lst_vids.Items.Clear();
                        int[] numbers = new int[] { rtntitle.Count, rtnpath.Count };
                        int minNumber = numbers.Min();
                        string path;
                        Size lSize = webvideo.Size;
                        for (int runs = 0; runs + 1 < minNumber; runs++)
                        {
                            path = rtnpath[runs].ToString();
                            if ((rtnCoords = Regex.Match(path, @"w=[0-9]+", RegexOptions.Compiled)).Success)
                            {
                                path = path.Replace(rtnCoords.Value, "w=" + lSize.Width.ToString());
                                rtnCoords = Regex.Match(path, @"h=[0-9]+", RegexOptions.Compiled);
                                path = path.Replace(rtnCoords.Value, "h=" + lSize.Height.ToString());
                            }
                            else if ((rtnCoords = Regex.Match(path, @"width=[0-9]+", RegexOptions.Compiled)).Success)
                            {
                                path = path.Replace(rtnCoords.ToString(), "width=" + lSize.Width.ToString());
                                rtnCoords = Regex.Match(path, @"height=[0-9]+", RegexOptions.Compiled);
                                path = path.Replace(rtnCoords.ToString(), "height=" + lSize.Height.ToString());
                            }
                            AnimeTitle[runs] = rtntitle[runs].ToString();
                            AnimeUrl[runs] = path;
                            lst_vids.Items.Add(AnimeTitle[runs]);
                            VidType = "Animep3";
                        }
                        lst_vids.Items.Add("<< Go back to episodes");
                    }
                    catch { }
                }
                else if (VidType == "Anime")
                {
                    setupvid(VidUrl[lst_vids.SelectedIndex], @"(?<=bookmark"" title="")[a-zA-Z0-9:/.! '-]+", @"(?<=episode_list"">&nbsp;&nbsp;<a href="")[a-zA-Z0-9:/.! '-]+");
                    VidType = "Animep2";
                }
            }
        }

        private void lst_games_DoubleClick(object sender, EventArgs e)
        {
            flashsearch();
        }

        private void flashsearch()
        {
            web_games.Visible = false;
            web_games.Navigate(new Uri(GameURL[lst_games.SelectedIndex]));
            while (web_games.ReadyState != WebBrowserReadyState.Complete)
            {
                Application.DoEvents();
            }
            web_games.Navigate(new Uri(GameEmbedURL[lst_games.SelectedIndex]));
            while (web_games.ReadyState != WebBrowserReadyState.Complete)
            {
                Application.DoEvents();
            }
            web_games.Visible = true;
        }

        private void rad_youtubesearch_CheckedChanged(object sender, EventArgs e)
        {
            if (rad_youtubesearch.Checked == true)
            {
                btn_randomanime.Visible = false;
                btn_featured.Visible = false;
                btn_newrel.Visible = false;
                btn_latest.Visible = false;
                btn_mostviews.Visible = false;
                pnl_yt.Visible = true;
                if (rad_ytchannelsec.Checked == true)
                {
                    cmb_youtubechnfavs.Visible = true;
                    btn_gofav.Visible = true;
                }
                else
                {
                    cmb_youtubechnfavs.Visible = false;
                    btn_gofav.Visible = false;
                    btn_addfav.Visible = false;
                    btn_removefav.Visible = false;
                }
            }
            else
            {
                pnl_yt.Visible = false;
                cmb_youtubechnfavs.Visible = false;
                btn_gofav.Visible = false;
                btn_addfav.Visible = false;
                btn_removefav.Visible = false;
            }
            trv_shows.Visible = false;
        }

        private void lst_vids_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                webplayersearch();
            }
        }

        private void lst_games_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                flashsearch();
            }
        }

        private void lst_external_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                externallaunch();
            }
        }

        private void rad_anime44search_CheckedChanged(object sender, EventArgs e)
        {
            if (rad_animesearch.Checked == true)
            {
                btn_randomanime.Visible = true;
            }
            else
            {
                btn_randomanime.Visible = false;
            }
            trv_shows.Visible = false;
        }

        private void txt_ur_KeyUp(object sender, KeyEventArgs e)
        {
            if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt"))
            {
                if (txt_ur.Text != "")
                {
                    if (e.KeyCode != Keys.Back)
                    {
                        string look = txt_ur.Text;
                        int n = txt_ur.SelectionStart;
                        string[] stringArray = new string[1000];
                        int pos = 0;
                        using (StreamReader read = new StreamReader(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt"))
                        {
                            while ((stringArray[pos] = read.ReadLine()) != null)
                            {
                                if (stringArray[pos].StartsWith(look))
                                {
                                    txt_ur.Focus();
                                    txt_ur.Text = stringArray[pos];
                                    txt_ur.SelectionStart = n;
                                    txt_ur.Select(n, txt_ur.Text.Length - n);
                                    break;
                                }
                                pos++;
                            }
                        }
                    }
                }
            }
        }

        private void clearHistoryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            StreamWriter w = File.CreateText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\History.txt");
            w.Close();
            txt_ur.Items.Clear();
        }

        private void txt_ur_SelectedIndexChanged(object sender, EventArgs e)
        {
            gotourl();
        }

        private void btn_delscreen_Click(object sender, EventArgs e)
        {
            pic_shots.Image = null;
            try
            {
                File.Delete(ScreenShot[Currentshot]);
            }
            catch { }
            ScreenShot = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\ScreenShots");
            Screenshots = ScreenShot.Count();
            Currentshot = 0;
            if (Screenshots > 0)
            {
                try
                {
                    FileStream fileStream = new FileStream(ScreenShot[Currentshot], FileMode.Open, FileAccess.Read);
                    pic_shots.Image = Image.FromStream(fileStream);
                    fileStream.Close();
                }
                catch { }
            }
        }

        private void blockInternetExplorerPopupsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (blockInternetExplorerPopupsToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                blockInternetExplorerPopupsToolStripMenuItem.CheckState = CheckState.Checked;
                blockInternetExplorerPopupsToolStripMenuItem.Image = global::RS_Client.Properties.Resources.stop;
            }
            else
            {
                blockInternetExplorerPopupsToolStripMenuItem.CheckState = CheckState.Unchecked;
                blockInternetExplorerPopupsToolStripMenuItem.Image = null;
            }
        }

        private void checkForGrandExchangeUpdatesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (checkForGrandExchangeUpdatesToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                checkForGrandExchangeUpdatesToolStripMenuItem.CheckState = CheckState.Checked;
                checkForGrandExchangeUpdatesToolStripMenuItem.Image = global::RS_Client.Properties.Resources.Grand_Exchange_icon;
                tmr_geupdates.Enabled = true;
            }
            else
            {
                checkForGrandExchangeUpdatesToolStripMenuItem.CheckState = CheckState.Unchecked;
                checkForGrandExchangeUpdatesToolStripMenuItem.Image = null;
                tmr_geupdates.Enabled = false;
            }
        }

        private void tmr_geupdates_Tick(object sender, EventArgs e)
        {
            try
            {
                using (WebClient searchvid = new WebClient())
                {
                    string searchvidstream = searchvid.DownloadString("http://services.runescape.com/m=itemdb_rs/Nature_rune/viewitem.ws?obj=561");
                    StringReader searchvidread = new StringReader(searchvidstream);
                    {
                        string searchvidreadtemp = "";
                        int spot1 = -1;
                        int spot2 = -1;
                        int newprice = 0;
                        while ((searchvidreadtemp = searchvidread.ReadLine()) != null)
                        {
                            if (searchvidreadtemp.Contains("<td>"))
                            {
                                spot1 = -1;
                                spot2 = -1;
                                spot1 = searchvidreadtemp.IndexOf("<td>");
                                spot2 = searchvidreadtemp.Substring(spot1 + 4, searchvidreadtemp.Length - (spot1 + 4)).IndexOf("</td>");
                                if (spot1 != -1 && spot2 != -1)
                                {
                                    newprice = Convert.ToInt32(searchvidreadtemp.Substring(spot1 + 4, spot2));
                                    if (newprice != natprice)
                                    {
                                        natprice = newprice;
                                        MessageBox.Show(this, "The Grand Exchange prices have been updated.", "Updated");
                                    }
                                }
                            }
                        }
                        searchvidread.Close();
                    }
                }
            }
            catch { }
        }

        private void maintab_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (maintab.SelectedIndex)
            {
                case 0:
                    tabControl1.SelectedIndex = 0;
                    break;
                case 2:
                    tabControl1.SelectedIndex = 8;
                    break;
                case 3:
                    tabControl1.SelectedIndex = 7;
                    break;
                case 4:
                    tabControl1.SelectedIndex = 9;
                    break;
                case 5:
                    tabControl1.SelectedIndex = 2;
                    break;
                case 8:
                    tabControl1.SelectedIndex = 6;
                    break;
            }
        }

        private void Form1_ResizeEnd(object sender, EventArgs e)
        {
            int dis = splitContainer1.SplitterDistance;
            int di = splitContainer2.SplitterDistance;
            webBrowser2.Size = new System.Drawing.Size(dis + 22, di);

            try
            {
                SetPositionSize(p.MainWindowHandle, 0, 0, pnl_gba.Width, pnl_gba.Height);
                ShowWindow(p.MainWindowHandle.ToInt32(), SW_SHOWMAXIMIZED);
            }
            catch { }
        }

        private void pnl_gba_Enter(object sender, EventArgs e)
        {
            try
            {
                SetPositionSize(p.MainWindowHandle, 0, 0, pnl_gba.Width, pnl_gba.Height);
                ShowWindow(p.MainWindowHandle.ToInt32(), SW_SHOWMAXIMIZED);
            }
            catch { }
        }

        private void pnl_gba_MouseEnter(object sender, EventArgs e)
        {
            try
            {
                SetPositionSize(p.MainWindowHandle, 0, 0, pnl_gba.Width, pnl_gba.Height);
                ShowWindow(p.MainWindowHandle.ToInt32(), SW_SHOWMAXIMIZED);
            }
            catch { }
        }

        private void swapPanelsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            DialogResult answer = new DialogResult();
            answer = MessageBox.Show("Warning! Swapping panels will refresh RuneScape, continue anyway?", "Refresh Warning!", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (answer == DialogResult.Yes)
            {
                if (splitContainer1.RightToLeft == RightToLeft.Yes)
                {
                    splitContainer1.RightToLeft = RightToLeft.No;
                }
                else
                {
                    splitContainer1.RightToLeft = RightToLeft.Yes;
                }
                menuStrip2.RightToLeft = RightToLeft.No;
                maintab.RightToLeft = RightToLeft.No;
                tabControl1.RightToLeft = RightToLeft.No;
                txt_news.RightToLeft = RightToLeft.No;
            }
        }

        private void lst_manga_DoubleClick(object sender, EventArgs e)
        {
            if (lst_manga.Items.Count != 0 && lst_manga.SelectedIndex > -1)
            {
                readmanga();
            }
        }

        private void lst_manga_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)13)
            {
                if (lst_manga.Items.Count != 0 && lst_manga.SelectedIndex > -1)
                {
                    readmanga();
                }
            }
        }

        private void saveAndExitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (saveAndExitToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                saveAndExitToolStripMenuItem.CheckState = CheckState.Checked;
                saveAndExitToolStripMenuItem.Image = global::RS_Client.Properties.Resources.save;
            }
            else
            {
                saveAndExitToolStripMenuItem.CheckState = CheckState.Unchecked;
                saveAndExitToolStripMenuItem.Image = null;
            }
        }

        private void pic_pricegraph_Click(object sender, EventArgs e)
        {
            if (pic_pricegraph.Image != null)
            {
                popout frmOut = new popout();
                frmOut.SetImage(pic_pricegraph.Image);
                frmOut.Show();
            }
        }

        private void btn_randomanime_Click(object sender, EventArgs e)
        {
            lst_vids.Items.Clear();
            while (lst_vids.Items.Count == 0)
            {
                randomanime();
            }
            lst_vids.Focus();
        }

        private void randomanime()
        {
            lst_vids.Items.Clear();
            string html = RandysStringFunctions.GetHtmlContent("http://www.lovemyanime.net/anime-series-list/");
            MatchCollection rtnpath = Regex.Matches(html, @"(?<=><a href="")[a-zA-Z:/.0-9-]+", RegexOptions.Compiled);
            Random random = new Random();
            int rndEp = random.Next(0, rtnpath.Count);
            setupvid(rtnpath[rndEp].ToString(), @"(?<=bookmark"" title="")[a-zA-Z0-9:/.! '-]+", @"(?<=episode_list"">&nbsp;&nbsp;<a href="")[a-zA-Z0-9:/.! '-]+");
            VidType = "Animep2";
        }

        private void button1_Click(object sender, EventArgs e)
        {
            highscoreslookup(txt_user.Text);
        }

        private void splitContainer1_SplitterMoved(object sender, SplitterEventArgs e)
        {
            int dis = splitContainer1.SplitterDistance;
            Size websize = webBrowser2.Size;
            webBrowser2.Size = new System.Drawing.Size(dis + 22, websize.Height);

            try
            {
                SetPositionSize(p.MainWindowHandle, 0, 0, pnl_gba.Width, pnl_gba.Height);
                ShowWindow(p.MainWindowHandle.ToInt32(), SW_SHOWMAXIMIZED);
            }
            catch { }
        }

        private void splitContainer2_SplitterMoved(object sender, SplitterEventArgs e)
        {
            int dis = splitContainer2.SplitterDistance;
            Size websize = webBrowser2.Size;
            webBrowser2.Size = new System.Drawing.Size(websize.Width, dis);
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            GameFill("http://www.gamefudge.com/latest");
        }

        public void HideScriptErrors(WebBrowser wb, bool Hide)
        {
            FieldInfo fiComWebBrowser = typeof(WebBrowser).GetField("_axIWebBrowser2", BindingFlags.Instance | BindingFlags.NonPublic);
            if (fiComWebBrowser == null) return;
            object objComWebBrowser = fiComWebBrowser.GetValue(wb);
            if (objComWebBrowser == null) return;
            objComWebBrowser.GetType().InvokeMember("Silent", BindingFlags.SetProperty, null, objComWebBrowser, new object[] { Hide });
        }

        private void button2_Click(object sender, EventArgs e)
        {
            GameFill("http://www.gamefudge.com/toprated");
        }

        private void Browser1_NewWindow(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (blockInternetExplorerPopupsToolStripMenuItem.CheckState == CheckState.Checked)
            {
                e.Cancel = true;
            }
        }

        [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
        public static extern IntPtr GetDesktopWindow();

        private void btn_embed_Click(object sender, EventArgs e)
        {
            if (lst_exes.Items.Count > 0 && lst_exes.SelectedIndex > 0)
            {
                if (p != null)
                {
                    try
                    {
                        SetParent(p.MainWindowHandle, GetDesktopWindow());
                        SetWindowLong(p.MainWindowHandle, GWL_STYLE, style);
                        ShowWindow(p.MainWindowHandle.ToInt32(), 3);
                        ShowWindow(p.MainWindowHandle.ToInt32(), 9);
                    }
                    catch { }
                }
                Process[] processlist = Process.GetProcesses(".");
                long[] ramusage = new long[50];
                Process[] processes = new Process[50];
                int i = 0;
                foreach (Process theprocess in processlist)
                {
                    try
                    {
                        if (theprocess.MainModule.FileName.ToLower().Contains(".exe"))
                        {
                            if (theprocess.MainModule.FileName.ToLower().Contains(lst_exes.Items[lst_exes.SelectedIndex].ToString().ToLower()))
                            {
                                p = theprocess;
                                SetParent(p.MainWindowHandle, pnl_gba.Handle);
                                style = GetWindowLong(p.MainWindowHandle, GWL_STYLE);
                                SetWindowLong(p.MainWindowHandle, GWL_STYLE, (style & ~WS_CAPTION));
                                ShowWindow(p.MainWindowHandle.ToInt32(), 3);
                                maintab.SelectedIndex = 5;
                                ramusage[i] = p.WorkingSet64;
                                processes[i] = p;
                                i++;
                            }
                        }
                    }
                    catch (Win32Exception)
                    {

                    }
                }
                long max = ramusage.Max();
                i = 0;
                foreach (long testnum in ramusage)
                {
                    if (testnum == max)
                    {
                        p = processes[i];
                    }
                    i++;
                }
            }
        }

        private void btn_processes_Click(object sender, EventArgs e)
        {
            Process[] processlist = Process.GetProcesses(".");
            lst_exes.Items.Clear();
            foreach (Process theprocess in processlist)
            {
                try
                {
                    if (!theprocess.MainModule.FileName.ToLower().Contains("rs client") && theprocess.MainModule.FileName.ToLower().Contains(".exe") && !theprocess.MainModule.FileName.ToLower().Contains(@"\system32\") && !theprocess.MainModule.FileName.ToLower().Contains(@"\windows\"))
                    {
                        lst_exes.Items.Add(theprocess.MainModule.ModuleName);
                    }
                }
                catch (Win32Exception)
                {

                }
            }
            lst_exes.Focus();
        }

        private void Done(object sender, System.Windows.Forms.WebBrowserDocumentCompletedEventArgs e)
        {
            tabControl2.SelectedTab.Text = ((WebBrowser)tabControl2.SelectedTab.Controls[0]).DocumentTitle.Substring(0, 8);
            txt_ur.Text = ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Url.ToString();
        }

        private void btn_clearembed_Click(object sender, EventArgs e)
        {
            if (p != null)
            {
                try
                {
                    SetParent(p.MainWindowHandle, GetDesktopWindow());
                    SetWindowLong(p.MainWindowHandle, GWL_STYLE, style);
                    ShowWindow(p.MainWindowHandle.ToInt32(), 3);
                    ShowWindow(p.MainWindowHandle.ToInt32(), 9);
                    p = null;
                    style = -1;
                }
                catch { }
            }
        }

        private void Navigated(object sender, WebBrowserNavigatedEventArgs e)
        {
            ((WebBrowser)sender).Document.Window.Error += new HtmlElementErrorEventHandler(Window_Error);
            HideScriptErrors(((WebBrowser)sender), true);
            tabControl2.SelectedTab.Text = ((WebBrowser)tabControl2.SelectedTab.Controls[0]).DocumentTitle.Substring(0, 8);
            txt_ur.Text = ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Url.ToString();
        }

        private void btn_refresh_Click(object sender, EventArgs e)
        {
            btn_refresh.Enabled = false;
            ((WebBrowser)tabControl2.SelectedTab.Controls[0]).Refresh();
            maintab.SelectedIndex = 0;
            btn_refresh.Enabled = true;
        }

        private void btn_randommanga_Click(object sender, EventArgs e)
        {
            pic_manga0.Image = null;
            randommanga();
        }

        private void randommanga()
        {
            try
            {
                Match rtnstr = Regex.Match(RandysStringFunctions.GetHtmlContent("http://www.mangarush.com/random-manga/"), @"<a href=.*/manga/.*class=.*", RegexOptions.Compiled);
                string mangastr = rtnstr.Value;
                if (mangastr != null && mangastr != "")
                {
                    originaltitle = Regex.Match(mangastr, @"(?<=>).*(?=</a>)", RegexOptions.Compiled).Value;
                    title = Regex.Match(mangastr, @"(?<="").*/manga/[0-9a-zA-Z-]+", RegexOptions.Compiled).Value;
                    mangatitleforchap = title;
                    title = title.Replace("/manga/", "/files/mangas/");
                    string tmp = Regex.Match(mangastr, @"(?<="").*/manga/[0-9a-zA-Z-]+/v-", RegexOptions.Compiled).Value + "1/1/1.jpg";
                    if (tmp == "1/1/1.jpg")
                    {
                        mangastr = Regex.Match(mangastr, @"(?<="").*/manga/[0-9a-zA-Z-]+/", RegexOptions.Compiled).Value + "1/1.jpg";
                        rtnstr = Regex.Match(RandysStringFunctions.GetHtmlContent(mangatitleforchap + "/1"), @"(?<=Pages.*(\n).*mangadetail"">).*(?=</td)", RegexOptions.Compiled);
                        mangachappages = Convert.ToInt16(rtnstr.Value);
                        txt_vol.Visible = false;
                        label27.Visible = false;
                        txt_vol.Text = "";
                        volume = "0";
                    }
                    else
                    {
                        mangastr = tmp;
                        rtnstr = Regex.Match(RandysStringFunctions.GetHtmlContent(mangatitleforchap + "/v-1/1"), @"(?<=Pages.*(\n).*mangadetail"">).*(?=</td)", RegexOptions.Compiled);
                        mangachappages = Convert.ToInt16(rtnstr.Value);
                        txt_vol.Visible = true;
                        label27.Visible = true;
                        txt_vol.Text = "1";
                        volume = "1";
                    }
                    mangastr = mangastr.Replace("manga/", "files/mangas/");
                    mangapicurl = mangastr;
                    WebRequest requestPic = WebRequest.Create(mangapicurl);
                    WebResponse responsePic = requestPic.GetResponse();
                    Image img = Image.FromStream(responsePic.GetResponseStream());
                    pic_manga0.Image = img;
                    maintab.SelectedIndex = 3;
                    txt_chapter.Text = "1";
                    chapter = "1";
                    txt_page.Text = "1";
                    page = "1";
                    txt_title.Text = originaltitle;
                }
            }
            catch { }
        }

        private void lst_vids_SelectedIndexChanged(object sender, EventArgs e)
        {
            if ((VidType == "Movie" || VidType == "Showp1" || VidType == "Anime" || VidType == "Youtube" || VidType == "YoutubeChannel") && lst_vids.SelectedIndex > -1)
            {
                try
                {
                    pic_video.Visible = true;
                    webvideo.Navigate("about:blank");
                    Image img = null;
                    WebRequest requestPic = WebRequest.Create(VidPic[lst_vids.SelectedIndex]);
                    WebResponse responsePic = requestPic.GetResponse();
                    img = Image.FromStream(responsePic.GetResponseStream());
                    pic_video.Image = img;
                    img = null;
                }
                catch
                {
                    pic_video.Visible = false;
                }

                try
                {
                    if (VidType == "Showp1")
                    {
                        if (trv_shows.Visible == false)
                        {
                            trv_shows.Visible = true;
                        }
                        if (btn_randomanime.Visible == true)
                        {
                            btn_randomanime.Visible = false;
                        }
                        if (pnl_yt.Visible == true)
                        {
                            pnl_yt.Visible = false;
                        }
                        if (trv_shows.Nodes.Count > 0)
                        {
                            trv_shows.Nodes.Clear();
                        }

                        string[] seasons;
                        seasons = VidSeasonlist[lst_vids.SelectedIndex].Split(',');
                        string[] episodes;
                        episodes = VidEpisodelist[lst_vids.SelectedIndex].Split(',');

                        int seasoncounter = 0;
                        foreach (string seas in seasons)
                        {
                            if (seas == "" || seas == null)
                            {
                                break;
                            }
                            trv_shows.Nodes.Add("Season " + seas);
                            int episodenum = Convert.ToInt32(episodes[seasoncounter]);
                            for (int i = 1; i - 1 < episodenum; i++)
                            {
                                trv_shows.Nodes[trv_shows.Nodes.Count - 1].Nodes.Add("Episode " + i.ToString());
                            }
                            seasoncounter++;
                        }
                        showhelp = VidUrl[lst_vids.SelectedIndex];
                    }
                }
                catch { }
            }
        }

        private void iRCToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (iRCToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                splitContainer2.Panel2Collapsed = true;
                iRCToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                splitContainer2.Panel2Collapsed = false;
                iRCToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void trwFileExplorer_BeforeExpand(object sender, TreeViewCancelEventArgs e)
        {
            if (e.Node.Nodes[0].Text == "")
            {
                TreeNode node = fe.EnumerateDirectory(e.Node);
            }
        }

        static string[] mediaExtensions = {
        ".WAV", ".MID", ".MP3", ".AIFF",
        ".AVI", ".MP4", ".WMV", ".MPG", ".ASF"
        };

        private void trwFileExplorer_DoubleClick(object sender, EventArgs e)
        {
            try
            {
                if (trwFileExplorer.SelectedNode.ImageIndex == 2)
                {
                    if (trwFileExplorer.SelectedNode.FullPath.Contains("Desktop"))
                    {
                        if (mediaExtensions.Contains(Path.GetExtension(@"C:\Users\" + Environment.UserName + @"\" + trwFileExplorer.SelectedNode.FullPath.Replace(trwFileExplorer.TopNode.FullPath, trwFileExplorer.TopNode.ToString().Replace("TreeNode: ", ""))), StringComparer.OrdinalIgnoreCase))
                        {
                            wmp_main.URL = @"C:\Users\" + Environment.UserName + @"\" + trwFileExplorer.SelectedNode.FullPath.Replace(trwFileExplorer.TopNode.FullPath, trwFileExplorer.TopNode.ToString().Replace("TreeNode: ", ""));
                        }
                        else
                        {
                            Process.Start(@"C:\Users\" + Environment.UserName + @"\" + trwFileExplorer.SelectedNode.FullPath.Replace(trwFileExplorer.TopNode.FullPath, trwFileExplorer.TopNode.ToString().Replace("TreeNode: ", "")));
                        }
                    }
                    else
                    {
                        if (mediaExtensions.Contains(Path.GetExtension(trwFileExplorer.SelectedNode.FullPath.Replace(trwFileExplorer.TopNode.LastNode.FullPath, trwFileExplorer.TopNode.ToString().Replace("TreeNode: ", ""))), StringComparer.OrdinalIgnoreCase))
                        {
                            wmp_main.URL = trwFileExplorer.SelectedNode.FullPath.Replace(trwFileExplorer.TopNode.LastNode.FullPath, trwFileExplorer.TopNode.ToString().Replace("TreeNode: ", ""));
                        }
                        else
                        {
                            Process.Start(trwFileExplorer.SelectedNode.FullPath.Replace(trwFileExplorer.TopNode.LastNode.FullPath, trwFileExplorer.TopNode.ToString().Replace("TreeNode: ", "")));
                        }
                    }
                }
            }
            catch { }
        }

        string GetLine(string text, int lineNo)
        {
            string[] lines = text.Replace("\r", "").Split('\n');
            return lines.Length >= lineNo ? lines[lineNo - 1] : null;
        }

        private void trv_shows_DoubleClick(object sender, EventArgs e)
        {
            tries = 0;
            playshow();
        }

        private void playshow()
        {
            try
            {
                if ((trv_shows.SelectedNode.Text != null || trv_shows.SelectedNode.Text != ""))
                {
                    if (!trv_shows.SelectedNode.Text.Contains("Season"))
                    {
                        tries++;
                        pic_video.Visible = false;
                        string episode = trv_shows.SelectedNode.Text.Replace("Episode ", "");
                        string season = trv_shows.SelectedNode.Parent.Text.Replace("Season ", "");
                        string html = RandysStringFunctions.GetHtmlContent(showhelp);
                        Match matchurl = Regex.Match(html, @"/episode/.*_s" + season + "_e" + episode + "-[0-9]+(.html)", RegexOptions.Compiled);
                        string matchstr = "http://watchseries.eu" + matchurl.ToString();
                        html = RandysStringFunctions.GetHtmlContent(matchstr);
                        MatchCollection rtnEmbedURL = Regex.Matches(html, @"(?<=<a href=""../).*(?="" .*target.*Watch This Link.*)", RegexOptions.Compiled);
                        MatchCollection rtnFlagTest = Regex.Matches(html, @"(?<=																									)[a-zA-Z0-9]+", RegexOptions.Compiled);
                        bool flgCheck = false;
                        int found = 0;
                        for (int i = 0; i < rtnFlagTest.Count; i++)
                        {
                            switch (rtnFlagTest[i].ToString())
                            {
                                case "stagevu":
                                    if (stagevuToolStripMenuItem.CheckState == CheckState.Checked)
                                    {
                                        flgCheck = true;
                                    }
                                    break;
                                case "putlocker":
                                    if (putlockerToolStripMenuItem.CheckState == CheckState.Checked)
                                    {
                                        flgCheck = true;
                                    }
                                    break;
                                case "gorillavid":
                                    if (gorillavidToolStripMenuItem.CheckState == CheckState.Checked)
                                    {
                                        flgCheck = true;
                                    }
                                    break;
                                case "movshare":
                                    if (movshareToolStripMenuItem.CheckState == CheckState.Checked)
                                    {
                                        flgCheck = true;
                                    }
                                    break;
                                case "nowvideo":
                                    if (nowvideoToolStripMenuItem.CheckState == CheckState.Checked)
                                    {
                                        flgCheck = true;
                                    }
                                    break;
                                case "videoweed":
                                    if (videoweedToolStripMenuItem1.CheckState == CheckState.Checked)
                                    {
                                        flgCheck = true;
                                    }
                                    break;
                                case "uploadc":
                                    if (uploadcToolStripMenuItem.CheckState == CheckState.Checked)
                                    {
                                        flgCheck = true;
                                    }
                                    break;
                                default:
                                    found++;
                                    break;
                            }
                            if (flgCheck == true)
                            {
                                break;
                            }
                        }
                        try
                        {
                            webBrowserunshorten.Navigate("http://watchseries.eu/" + rtnEmbedURL[found].ToString());
                            while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                            {
                                Application.DoEvents();
                            }
                            string htm = webBrowserunshorten.DocumentText;
                            webBrowserunshorten.Navigate("about:blank");
                            Match match;
                            match = Regex.Match(GetLine(htm, 68), @"(?<=<a href="")([^""]*)(?="" class=)", RegexOptions.Compiled);
                            matchstr = match.ToString();
                        }
                        catch
                        {
                            matchstr = "";
                            webBrowserunshorten.Navigate("about:blank");
                        }
                        Size lSize = webvideo.Size;
                        string code = "";
                        switch (rtnFlagTest[found].ToString())
                        {
                            case "stagevu":
                                webBrowserunshorten.Navigate(matchstr);
                                while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                                {
                                    Application.DoEvents();
                                }
                                code = webBrowserunshorten.Url.ToString().Replace("http://stagevu.com/video/", "");
                                if (code == "http://watchseries.eu/404_page" || code.Contains("404.html"))
                                {
                                    if (tries < 3)
                                    {
                                        playshow();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                }
                                else
                                {
                                    webBrowserunshorten.Navigate("about:blank");
                                    webvideo.Navigate(new Uri("http://stagevu.com/embed?width=" + lSize.Width.ToString() + "&height=" + (lSize.Height - 50).ToString() + "&background=000&uid=" + code));
                                }
                                break;
                            case "putlocker":
                                webBrowserunshorten.Navigate(matchstr);
                                while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                                {
                                    Application.DoEvents();
                                }
                                code = webBrowserunshorten.Url.ToString().Replace("http://www.putlocker.com/file/", "");
                                if (code == "http://watchseries.eu/404_page" || code.Contains("404.html"))
                                {
                                    if (tries < 3)
                                    {
                                        playshow();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                }
                                else
                                {
                                    webBrowserunshorten.Navigate("about:blank");
                                    webvideo.Navigate(new Uri("http://www.putlocker.com/embed/" + code));
                                }
                                break;
                            case "gorillavid":
                                webBrowserunshorten.Navigate(matchstr);
                                while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                                {
                                    Application.DoEvents();
                                }
                                code = webBrowserunshorten.Url.ToString().Replace("http://gorillavid.in/", "");
                                if (code == "http://watchseries.eu/404_page" || code.Contains("404.html"))
                                {
                                    if (tries < 3)
                                    {
                                        playshow();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                }
                                else
                                {
                                    webBrowserunshorten.Navigate("about:blank");
                                    File.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\temp.htm", @"<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000' width='" + lSize.Width.ToString() + @"' height='" + lSize.Height.ToString() + @"'><param name='movie' value='http://gorillavid.in/player/player.swf'><param name='allowfullscreen' value='true'><param name='allowscriptaccess' value='always'><param name='wmode' value='transparent'><param name='flashvars' value='file=http://gorillavid.in/vidembed-" + code + @".avi&image=http://img.gorillavid.in/aHR0cDovLzg1LjE3LjMwLjIxNjo4MTgyL2kvMDEvMDAwMTkvYXRsdDI2NWM0OWZr.jpg&provider=http'><embed src='http://gorillavid.in/player/player.swf' width='" + lSize.Width.ToString() + @"' height='" + lSize.Height.ToString() + @"' bgcolor='#000000' allowscriptaccess='always' allowfullscreen='true' flashvars='file=http://gorillavid.in/vidembed-ucqq37qefsr9.avi&image=http://img.gorillavid.in/aHR0cDovLzg1LjE3LjMwLjIxNjo4MTgyL2kvMDEvMDAwMTkvYXRsdDI2NWM0OWZr.jpg&provider=http' /></object>");
                                    webvideo.Navigate(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\\Randys RS Client\\temp.htm");
                                }
                                break;
                            case "movshare":
                                webBrowserunshorten.Navigate(matchstr);
                                while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                                {
                                    Application.DoEvents();
                                }
                                code = webBrowserunshorten.Url.ToString().Replace("http://www.movshare.net/video/", "");
                                if (code == "http://watchseries.eu/404_page" || code.Contains("404.html"))
                                {
                                    if (tries < 3)
                                    {
                                        playshow();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                }
                                else
                                {
                                    webBrowserunshorten.Navigate("about:blank");
                                    webvideo.Navigate(new Uri("http://embed.movshare.net/embed.php?v=" + code + "&width=" + lSize.Width.ToString() + "&height=" + (lSize.Height - 30).ToString() + "&color=black"));
                                }
                                break;
                            case "nowvideo":
                                webBrowserunshorten.Navigate(matchstr);
                                while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                                {
                                    Application.DoEvents();
                                }
                                code = webBrowserunshorten.Url.ToString().Replace("http://www.nowvideo.eu/video/", "");
                                if (code == "http://watchseries.eu/404_page" || code.Contains("404.html"))
                                {
                                    if (tries < 3)
                                    {
                                        playshow();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                }
                                else
                                {
                                    webBrowserunshorten.Navigate("about:blank");
                                    webvideo.Navigate(new Uri("http://embed.nowvideo.eu/embed.php?v=" + code + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString()));
                                }
                                break;
                            case "videoweed":
                                webBrowserunshorten.Navigate(matchstr);
                                while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                                {
                                    Application.DoEvents();
                                }
                                code = webBrowserunshorten.Url.ToString().Replace("http://www.videoweed.es/file/", "");
                                if (code == "http://watchseries.eu/404_page" || code.Contains("404.html"))
                                {
                                    if (tries < 3)
                                    {
                                        playshow();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                }
                                else
                                {
                                    webBrowserunshorten.Navigate("about:blank");
                                    webvideo.Navigate(new Uri("http://embed.videoweed.es/embed.php?v=" + code + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString()));
                                }
                                break;
                            case "uploadc":
                                webBrowserunshorten.Navigate(matchstr);
                                while (webBrowserunshorten.ReadyState != WebBrowserReadyState.Complete)
                                {
                                    Application.DoEvents();
                                }
                                code = webBrowserunshorten.Url.ToString().Replace("http://www.uploadc.com/", "");
                                int pos = code.IndexOf('/');
                                code = code.Substring(0, pos);
                                if (code == "http://watchseries.eu/404_page" || code.Contains("404.html"))
                                {
                                    if (tries < 3)
                                    {
                                        playshow();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                }
                                else
                                {
                                    Match rtncode = Regex.Match(code, @".*(?=/.*/)", RegexOptions.Compiled);
                                    if (rtncode.Success)
                                    {
                                        code = rtncode.ToString();
                                    }
                                    webBrowserunshorten.Navigate("about:blank");
                                    webvideo.Navigate(new Uri("http://www.uploadc.com/embed-" + code + ".html"));
                                }
                                break;
                        }
                    }
                }
            }
            catch { }
        }

        private void stagevuToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (stagevuToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                stagevuToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                stagevuToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void putlockerToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (putlockerToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                putlockerToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                putlockerToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void gorillavidToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (gorillavidToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                gorillavidToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                gorillavidToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void movshareToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (movshareToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                movshareToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                movshareToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void nowvideoToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (nowvideoToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                nowvideoToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                nowvideoToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void putlockerToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (putlockerToolStripMenuItem1.CheckState == CheckState.Unchecked)
            {
                putlockerToolStripMenuItem1.CheckState = CheckState.Checked;
            }
            else
            {
                putlockerToolStripMenuItem1.CheckState = CheckState.Unchecked;
            }
        }

        private void sockshareToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (sockshareToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                sockshareToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                sockshareToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void nowvideoToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (nowvideoToolStripMenuItem1.CheckState == CheckState.Unchecked)
            {
                nowvideoToolStripMenuItem1.CheckState = CheckState.Checked;
            }
            else
            {
                nowvideoToolStripMenuItem1.CheckState = CheckState.Unchecked;
            }
        }

        private void dwnToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dwnToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                dwnToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                dwnToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void videoweedToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (videoweedToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                videoweedToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                videoweedToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            GameFill("http://www.gamefudge.com/mostplayed");
        }

        private void btn_randgame_Click(object sender, EventArgs e)
        {
            try
            {
                lst_games.Focus();
                string html = RandysStringFunctions.GetHtmlContent("http://www.gamefudge.com/");
                int intStart = html.IndexOf("Random Games");
                html = html.Substring(intStart, html.Length - intStart);
                MatchCollection rtntitle = Regex.Matches(html, @"(?<=.*><a href=.*"">).*(?=</a></span><span )", RegexOptions.IgnoreCase);
                MatchCollection rtnurl = Regex.Matches(html, @"(?<=.*><a href="").*(?="">.*</a></span><span )", RegexOptions.IgnoreCase);
                MatchCollection rtnimg = Regex.Matches(html, @"(?<=.*><img src="").*(?="" class=)", RegexOptions.IgnoreCase);
                Array.Clear(GameEmbedURL, 0, GameEmbedURL.Count());
                Array.Clear(GameURL, 0, GameURL.Count());
                Array.Clear(GamePreview, 0, GamePreview.Count());
                Array.Clear(GameTitle, 0, GameTitle.Count());
                lst_games.Items.Clear();
                int[] numbers = new int[] { rtntitle.Count, rtnurl.Count, rtnimg.Count };
                int minNumber = numbers.Min();
                for (int runs = 0; runs < minNumber; runs++)
                {
                    GamePreview[runs] = @"http://www.gamefudge.com/" + rtnimg[runs].ToString();
                    GameTitle[runs] = RandysStringFunctions.Removetags(rtntitle[runs].ToString());
                    GameURL[runs] = @"http://www.gamefudge.com/" + rtnurl[runs].ToString();
                    html = RandysStringFunctions.GetHtmlContent(@"http://www.gamefudge.com/" + rtnurl[runs].ToString());
                    Match rtnembedurl = Regex.Match(html, @"(?<=new SWFObject."").*[.]swf", RegexOptions.IgnoreCase);
                    GameEmbedURL[runs] = rtnembedurl.ToString();
                    lst_games.Items.Add(GameTitle[runs]);
                }
            }
            catch { }
        }

        private void btn_normcalc_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.online-calculator.com/swf/online-calculator.swf");
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            switch (tabControl1.SelectedIndex)
            {
                case 6:
                    maintab.SelectedIndex = 8;
                    break;
            }
        }

        private void btn_Skill_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/c.swf?calc=SkillsCalculator");
        }

        private void btn_battlexp_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/CombatExperienceCalculator.swf");
        }

        private void button4_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.global-rs.com/calculators/combat/popup/");
        }

        private void btn_Energyrestore_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/EnergyRestorationCalculator.swf");
        }

        private void btn_equiptbonus_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/eC.swf");
        }

        private void btn_meleemax_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/WarriorMaxHitCalculator.swf");
        }

        private void btn_rangemax_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/RangedMaxHitCalculator.swf");
        }

        private void button4_Click_1(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/PestControlCalculator.swf");
        }

        private void btn_prayerdrain_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/PrayerDrainCalculator.swf");
        }

        private void btn_mismanage_Click(object sender, EventArgs e)
        {
            wbCalc.Navigate("http://www.runehq.com/calculators/rs2/MiscellaniaManagementCalculator.swf");
        }

        private void btn_featured_Click(object sender, EventArgs e)
        {
            Moviefill("http://movie25.com/movies/featured-movies/");
        }

        private void Moviefill(string url)
        {
            lst_vids.Items.Clear();
            string html = RandysStringFunctions.GetHtmlContent(url);
            MatchCollection rtntitle = Regex.Matches(html, @"(?<="" >).*(?=</a></h1>)", RegexOptions.Compiled);
            MatchCollection rtnpath = Regex.Matches(html, @"(?<=movie_pic""><a href="").*(?="" ><img src=)", RegexOptions.Compiled);
            MatchCollection rtnimage = Regex.Matches(html, @"(?<=><img src="").*[jpg](?="" width=)", RegexOptions.Compiled);
            Match rtnrealpath;
            Size lSize = webvideo.Size;
            string tmp = "";
            int count = 0;
            Array.Clear(VidUrl, 0, VidUrl.Count());
            for (int runs = 0; runs < rtntitle.Count; runs++)
            {
                try
                {
                    tmp = RandysStringFunctions.GetHtmlContent(rtnpath[runs].ToString());
                    if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.putlocker.com/file/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && putlockerToolStripMenuItem1.CheckState == CheckState.Checked)
                    {
                        VidUrl[count] = "http://www.putlocker.com/embed/" + rtnrealpath.Value;
                    }
                    else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.sockshare.com/file/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && sockshareToolStripMenuItem.CheckState == CheckState.Checked)
                    {
                        VidUrl[count] = "http://www.sockshare.com/embed/" + rtnrealpath.Value;
                    }
                    else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.nowvideo.eu/video/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && nowvideoToolStripMenuItem1.CheckState == CheckState.Checked)
                    {
                        VidUrl[count] = "http://embed.nowvideo.eu/embed.php?v=" + rtnrealpath.Value + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString();
                    }
                    else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://dwn.so/v/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && dwnToolStripMenuItem.CheckState == CheckState.Checked)
                    {
                        VidUrl[count] = "http://dwn.so/player/embed.php?v=" + rtnrealpath.Value + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString();
                    }
                    else if ((rtnrealpath = Regex.Match(tmp, @"(?<=url=http://www.videoweed.es/file/).*(?=','newwin','fullscreen=yes)", RegexOptions.Compiled)).Success && videoweedToolStripMenuItem.CheckState == CheckState.Checked)
                    {
                        VidUrl[count] = "http://embed.videoweed.es/embed.php?v=" + rtnrealpath.Value + "&width=" + lSize.Width.ToString() + "&height=" + lSize.Height.ToString();
                    }
                    if (VidUrl[count] != "" && VidUrl[count] != null)
                    {
                        VidTitle[count] = rtntitle[runs].ToString();
                        VidPic[count] = rtnimage[runs].ToString();
                        lst_vids.Items.Add(VidTitle[count]);
                        VidType = "Movie";
                        count++;
                    }
                }
                catch { }
            }
            lst_vids.Focus();
        }

        private void btn_latest_Click(object sender, EventArgs e)
        {
            Moviefill("http://movie25.com/movies/latest-added/");
        }

        private void btn_newrel_Click(object sender, EventArgs e)
        {
            Moviefill("http://movie25.com/movies/new-releases/");
        }

        private void btn_mostviews_Click(object sender, EventArgs e)
        {
            Moviefill("http://movie25.com/movies/most-viewed/");
        }

        private void rad_moviesearch_CheckedChanged(object sender, EventArgs e)
        {
            if (rad_moviesearch.Checked == true)
            {
                btn_featured.Visible = true;
                btn_newrel.Visible = true;
                btn_latest.Visible = true;
                btn_mostviews.Visible = true;
            }
            else
            {
                btn_featured.Visible = false;
                btn_newrel.Visible = false;
                btn_latest.Visible = false;
                btn_mostviews.Visible = false;
            }
            trv_shows.Visible = false;
        }

        private void videoweedToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (videoweedToolStripMenuItem1.CheckState == CheckState.Unchecked)
            {
                videoweedToolStripMenuItem1.CheckState = CheckState.Checked;
            }
            else
            {
                videoweedToolStripMenuItem1.CheckState = CheckState.Unchecked;
            }
        }

        private void uploadcToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (uploadcToolStripMenuItem.CheckState == CheckState.Unchecked)
            {
                uploadcToolStripMenuItem.CheckState = CheckState.Checked;
            }
            else
            {
                uploadcToolStripMenuItem.CheckState = CheckState.Unchecked;
            }
        }

        private void btn_addfav_Click(object sender, EventArgs e)
        {
            if (!cmb_youtubechnfavs.Items.Contains(currentytchannelname))
            {
                cmb_youtubechnfavs.Items.Add(currentytchannelname);
                bool flag = false;
                int i = 0;
                while (flag == false)
                {
                    if (ytFavURL[i] == null)
                    {
                        flag = true;
                    }
                    else
                    {
                        i++;
                    }
                }
                ytFavURL[i] = currentytchannel;
                ytFavTitle[i] = currentytchannelname;
                btn_addfav.Visible = false;
                btn_removefav.Visible = true;
            }
        }

        private void btn_gofav_Click(object sender, EventArgs e)
        {
            try
            {
                currentytchannelname = ytFavTitle[cmb_youtubechnfavs.SelectedIndex];
                currentytchannel = ytFavURL[cmb_youtubechnfavs.SelectedIndex];
                setupvid(currentytchannel, @"(?<=class=""yt-uix-sessionlink"" data-sessionlink=.*title="").*(?="" dir=)", @"(?<=<a href=""/watch[?]v=).*(?=&amp;.*title)", @"(?<=""//).*.jpg(?=.*video-time)");
                if (btn_addfav.Visible == true)
                {
                    btn_addfav.Visible = false;
                }
                if (btn_removefav.Visible == false)
                {
                    btn_removefav.Visible = true;
                }
                if (lst_vids.Items.Count > 0)
                {
                    VidType = "Youtube";
                }
            }
            catch { }
        }

        private void btn_removefav_Click(object sender, EventArgs e)
        {
            if (cmb_youtubechnfavs.Items.Contains(currentytchannelname))
            {
                int i = cmb_youtubechnfavs.Items.IndexOf(currentytchannelname);
                cmb_youtubechnfavs.Items.Remove(currentytchannelname);
                for (int ii = cmb_youtubechnfavs.Items.Count - i; ii > -1; ii--)
                {
                    ytFavTitle[i] = ytFavTitle[i + 1];
                    ytFavURL[i] = ytFavURL[i + 1];
                    i++;
                }
                btn_addfav.Visible = true;
                btn_removefav.Visible = false;
            }
        }

        private void rad_ytchannelsec_CheckedChanged(object sender, EventArgs e)
        {
            if (rad_ytchannelsec.Checked == true)
            {
                cmb_youtubechnfavs.Visible = true;
                btn_gofav.Visible = true;
            }
            else
            {
                cmb_youtubechnfavs.Visible = false;
                btn_gofav.Visible = false;
                btn_addfav.Visible = false;
                btn_removefav.Visible = false;
            }
        }

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll", SetLastError = true)]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);

        [DllImport("user32.dll")]
        static extern IntPtr GetForegroundWindow();

        private void tmr_embed_Tick(object sender, EventArgs e)
        {
            try
            {
                if (p != null)
                {
                    if (Process.GetProcessesByName(p.ProcessName).Length > 0)
                    {
                        if (keepEmbededToolStripMenuItem.CheckState == CheckState.Checked)
                        {
                            int processID;
                            GetWindowThreadProcessId(GetForegroundWindow(), out processID);
                            Process processToCheck = Process.GetProcessById(processID);
                            if (p.Id != processToCheck.Id)
                            {
                                SetForegroundWindow(p.MainWindowHandle);
                            }
                        }
                        else
                        {
                            keepEmbededToolStripMenuItem.CheckState = CheckState.Unchecked;
                            keepEmbededToolStripMenuItem.Image = null;
                            tmr_embed.Enabled = false;
                        }
                    }
                    else
                    {
                        p = null;
                        keepEmbededToolStripMenuItem.CheckState = CheckState.Unchecked;
                        keepEmbededToolStripMenuItem.Image = null;
                        tmr_embed.Enabled = false;
                    }
                }
                else
                {
                    keepEmbededToolStripMenuItem.CheckState = CheckState.Unchecked;
                    keepEmbededToolStripMenuItem.Image = null;
                    tmr_embed.Enabled = false;
                }
            }
            catch
            {
                keepEmbededToolStripMenuItem.CheckState = CheckState.Unchecked;
                keepEmbededToolStripMenuItem.Image = null;
                tmr_embed.Enabled = false;
            }
        }

        private void keepEmbededToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (keepEmbededToolStripMenuItem.CheckState == CheckState.Unchecked && p != null)
            {
                keepEmbededToolStripMenuItem.CheckState = CheckState.Checked;
                keepEmbededToolStripMenuItem.Image = global::RS_Client.Properties.Resources.externalproc;
                tmr_embed.Enabled = true;
            }
            else
            {
                keepEmbededToolStripMenuItem.CheckState = CheckState.Unchecked;
                keepEmbededToolStripMenuItem.Image = null;
                tmr_embed.Enabled = false;
            }
        }
    }
}